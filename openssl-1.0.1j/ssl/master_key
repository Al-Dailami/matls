ssl.h:663: * version; see draft-ietf-tls-downgrade-scsv-00 for details. */
ssl.h:973:	/* draft-rescorla-tls-opaque-prf-input-00.txt information */
ssl.h:1361:	/* draft-rescorla-tls-opaque-prf-input-00.txt information to be used for handshakes */
s3_clnt.c:198:	if (s->info_callback != NULL)
s3_clnt.c:199:		cb=s->info_callback;
s3_clnt.c:200:	else if (s->ctx->info_callback != NULL)
s3_clnt.c:201:		cb=s->ctx->info_callback;
s3_clnt.c:203:	s->in_handshake++;
s3_clnt.c:211:	if (s->tlsext_hb_pending)
s3_clnt.c:213:		s->tlsext_hb_pending = 0;
s3_clnt.c:214:		s->tlsext_hb_seq++;
s3_clnt.c:220:		state=s->state;
s3_clnt.c:222:		switch(s->state)
s3_clnt.c:225:			s->renegotiate=1;
s3_clnt.c:226:			s->state=SSL_ST_CONNECT;
s3_clnt.c:227:			s->ctx->stats.sess_connect_renegotiate++;
s3_clnt.c:234:			s->server=0;
s3_clnt.c:237:			if ((s->version & 0xff00 ) != 0x0300)
s3_clnt.c:244:			/* s->version=SSL3_VERSION; */
s3_clnt.c:245:			s->type=SSL_ST_CONNECT;
s3_clnt.c:247:			if (s->init_buf == NULL)
s3_clnt.c:259:				s->init_buf=buf;
s3_clnt.c:272:			s->state=SSL3_ST_CW_CLNT_HELLO_A;
s3_clnt.c:273:			s->ctx->stats.sess_connect++;
s3_clnt.c:274:			s->init_num=0;
s3_clnt.c:280:			s->shutdown=0;
s3_clnt.c:283:			s->state=SSL3_ST_CR_SRVR_HELLO_A;
s3_clnt.c:284:			s->init_num=0;
s3_clnt.c:287:			if (s->bbio != s->wbio)
s3_clnt.c:288:				s->wbio=BIO_push(s->bbio,s->wbio);
s3_clnt.c:297:			if (s->hit)
s3_clnt.c:299:				s->state=SSL3_ST_CR_FINISHED_A;
s3_clnt.c:301:				if (s->tlsext_ticket_expected)
s3_clnt.c:304:					s->state=SSL3_ST_CR_SESSION_TICKET_A;
s3_clnt.c:309:				s->state=SSL3_ST_CR_CERT_A;
s3_clnt.c:310:			s->init_num=0;
s3_clnt.c:320:				s->hit = 1;
s3_clnt.c:321:				if (s->tlsext_ticket_expected)
s3_clnt.c:322:					s->state=SSL3_ST_CR_SESSION_TICKET_A;
s3_clnt.c:324:					s->state=SSL3_ST_CR_FINISHED_A;
s3_clnt.c:325:				s->init_num=0;
s3_clnt.c:331:			if (!(s->s3->tmp.new_cipher->algorithm_auth & (SSL_aNULL|SSL_aSRP)) &&
s3_clnt.c:332:			    !(s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK))
s3_clnt.c:354:				if (s->ttpa_enabled)
s3_clnt.c:356:					ret = verify_cc_response(s->cc, X509_get_pubkey(sk_X509_value(s->session->sess_orig_cert->cert_chain, 0)), X509_get_pubkey(sk_X509_value(s->session->sess_cert->cert_chain, 0)));
s3_clnt.c:372:				if (s->tlsext_status_expected)
s3_clnt.c:373:					s->state=SSL3_ST_CR_CERT_STATUS_A;
s3_clnt.c:375:					s->state=SSL3_ST_CR_KEY_EXCH_A;
s3_clnt.c:380:				s->state=SSL3_ST_CR_KEY_EXCH_A;
s3_clnt.c:387:			s->state=SSL3_ST_CR_KEY_EXCH_A;
s3_clnt.c:389:			s->init_num=0;
s3_clnt.c:396:			s->state=SSL3_ST_CR_CERT_REQ_A;
s3_clnt.c:397:			s->init_num=0;
s3_clnt.c:412:			s->state=SSL3_ST_CR_SRVR_DONE_A;
s3_clnt.c:413:			s->init_num=0;
s3_clnt.c:421:			if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kSRP)
s3_clnt.c:431:			if (s->s3->tmp.cert_req)
s3_clnt.c:432:				s->state=SSL3_ST_CW_CERT_A;
s3_clnt.c:434:				s->state=SSL3_ST_CW_KEY_EXCH_A;
s3_clnt.c:435:			s->init_num=0;
s3_clnt.c:445:			s->state=SSL3_ST_CW_KEY_EXCH_A;
s3_clnt.c:446:			s->init_num=0;
s3_clnt.c:464:			if (s->s3->tmp.cert_req == 1)
s3_clnt.c:466:				s->state=SSL3_ST_CW_CERT_VRFY_A;
s3_clnt.c:470:				s->state=SSL3_ST_CW_CHANGE_A;
s3_clnt.c:471:				s->s3->change_cipher_spec=0;
s3_clnt.c:473:			if (s->s3->flags & TLS1_FLAGS_SKIP_CERT_VERIFY)
s3_clnt.c:475:				s->state=SSL3_ST_CW_CHANGE_A;
s3_clnt.c:476:				s->s3->change_cipher_spec=0;
s3_clnt.c:479:			s->init_num=0;
s3_clnt.c:486:			s->state=SSL3_ST_CW_CHANGE_A;
s3_clnt.c:487:			s->init_num=0;
s3_clnt.c:488:			s->s3->change_cipher_spec=0;
s3_clnt.c:498:			s->state=SSL3_ST_CW_FINISHED_A;
s3_clnt.c:500:			if (s->s3->next_proto_neg_seen)
s3_clnt.c:501:				s->state=SSL3_ST_CW_NEXT_PROTO_A;
s3_clnt.c:503:				s->state=SSL3_ST_CW_FINISHED_A;
s3_clnt.c:505:			s->init_num=0;
s3_clnt.c:507:			s->session->cipher=s->s3->tmp.new_cipher;
s3_clnt.c:509:			s->session->compress_meth=0;
s3_clnt.c:511:			if (s->s3->tmp.new_compression == NULL)
s3_clnt.c:512:				s->session->compress_meth=0;
s3_clnt.c:514:				s->session->compress_meth=
s3_clnt.c:515:					s->s3->tmp.new_compression->id;
s3_clnt.c:517:			if (!s->method->ssl3_enc->setup_key_block(s))
s3_clnt.c:523:			if (!s->method->ssl3_enc->change_cipher_state(s,
s3_clnt.c:537:			s->state=SSL3_ST_CW_FINISHED_A;
s3_clnt.c:545:				s->method->ssl3_enc->client_finished_label,
s3_clnt.c:546:				s->method->ssl3_enc->client_finished_label_len);
s3_clnt.c:548:			s->s3->flags |= SSL3_FLAGS_CCS_OK;
s3_clnt.c:549:			s->state=SSL3_ST_CW_FLUSH;
s3_clnt.c:552:			s->s3->flags&= ~SSL3_FLAGS_POP_BUFFER;
s3_clnt.c:553:			if (s->hit)
s3_clnt.c:555:				s->s3->tmp.next_state=SSL_ST_OK;
s3_clnt.c:556:				if (s->s3->flags & SSL3_FLAGS_DELAY_CLIENT_FINISHED)
s3_clnt.c:558:					s->state=SSL_ST_OK;
s3_clnt.c:559:					s->s3->flags|=SSL3_FLAGS_POP_BUFFER;
s3_clnt.c:560:					s->s3->delay_buf_pop_ret=0;
s3_clnt.c:567:				if (s->tlsext_ticket_expected)
s3_clnt.c:568:					s->s3->tmp.next_state=SSL3_ST_CR_SESSION_TICKET_A;
s3_clnt.c:572:				s->s3->tmp.next_state=SSL3_ST_CR_FINISHED_A;
s3_clnt.c:574:			s->init_num=0;
s3_clnt.c:582:			s->state=SSL3_ST_CR_FINISHED_A;
s3_clnt.c:583:			s->init_num=0;
s3_clnt.c:590:			s->state=SSL3_ST_CR_KEY_EXCH_A;
s3_clnt.c:591:			s->init_num=0;
s3_clnt.c:598:			s->s3->flags |= SSL3_FLAGS_CCS_OK;
s3_clnt.c:608:			if (s->hit)
s3_clnt.c:609:				s->state=SSL3_ST_CW_CHANGE_A;
s3_clnt.c:611:				s->state=SSL_ST_OK;
s3_clnt.c:612:			s->init_num=0;
s3_clnt.c:616:			s->rwstate=SSL_WRITING;
s3_clnt.c:617:			if (BIO_flush(s->wbio) <= 0)
s3_clnt.c:622:			s->rwstate=SSL_NOTHING;
s3_clnt.c:623:			s->state=s->s3->tmp.next_state;
s3_clnt.c:630:			if (s->init_buf != NULL)
s3_clnt.c:632:				BUF_MEM_free(s->init_buf);
s3_clnt.c:633:				s->init_buf=NULL;
s3_clnt.c:638:			if (!(s->s3->flags & SSL3_FLAGS_POP_BUFFER))
s3_clnt.c:642:			s->init_num=0;
s3_clnt.c:643:			s->renegotiate=0;
s3_clnt.c:644:			s->new_session=0;
s3_clnt.c:647:			if (s->hit) s->ctx->stats.sess_hit++;
s3_clnt.c:650:			/* s->server=0; */
s3_clnt.c:651:			s->handshake_func=ssl3_connect;
s3_clnt.c:652:			s->ctx->stats.sess_connect_good++;
s3_clnt.c:667:		if (!s->s3->tmp.reuse_message && !skip)
s3_clnt.c:669:			if (s->debug)
s3_clnt.c:671:				if ((ret=BIO_flush(s->wbio)) <= 0)
s3_clnt.c:675:			if ((cb != NULL) && (s->state != state))
s3_clnt.c:677:				new_state=s->state;
s3_clnt.c:678:				s->state=state;
s3_clnt.c:680:				s->state=new_state;
s3_clnt.c:686:	s->in_handshake--;
s3_clnt.c:706:	buf=(unsigned char *)s->init_buf->data;
s3_clnt.c:707:	if (s->state == SSL3_ST_CW_CLNT_HELLO_A)
s3_clnt.c:709:		SSL_SESSION *sess = s->session;
s3_clnt.c:711:			(sess->ssl_version != s->version) ||
s3_clnt.c:713:			!sess->session_id_length ||
s3_clnt.c:715:			(!sess->session_id_length && !sess->tlsext_tick) ||
s3_clnt.c:717:			(sess->not_resumable))
s3_clnt.c:724:		p=s->s3->client_random;
s3_clnt.c:762:		*(p++)=s->version>>8;
s3_clnt.c:763:		*(p++)=s->version&0xff;
s3_clnt.c:764:		s->client_version=s->version;
s3_clnt.c:766:		*(p++)=s->client_version>>8;
s3_clnt.c:767:		*(p++)=s->client_version&0xff;
s3_clnt.c:771:		memcpy(p,s->s3->client_random,SSL3_RANDOM_SIZE);
s3_clnt.c:775:		if (s->new_session)
s3_clnt.c:778:			i=s->session->session_id_length;
s3_clnt.c:782:			if (i > (int)sizeof(s->session->session_id))
s3_clnt.c:787:			memcpy(p,s->session->session_id,i);
s3_clnt.c:815:		if ((s->options & SSL_OP_NO_COMPRESSION)
s3_clnt.c:816:					|| !s->ctx->comp_methods)
s3_clnt.c:819:			j=sk_SSL_COMP_num(s->ctx->comp_methods);
s3_clnt.c:823:			comp=sk_SSL_COMP_value(s->ctx->comp_methods,i);
s3_clnt.c:848:		s->state=SSL3_ST_CW_CLNT_HELLO_B;
s3_clnt.c:850:		s->init_num=p-buf;
s3_clnt.c:851:		s->init_off=0;
s3_clnt.c:872:	n=s->method->ssl_get_message(s,
s3_clnt.c:883:		if ( s->s3->tmp.message_type == DTLS1_MT_HELLO_VERIFY_REQUEST)
s3_clnt.c:885:			if ( s->d1->send_cookie == 0)
s3_clnt.c:887:				s->s3->tmp.reuse_message = 1;
s3_clnt.c:899:	if ( s->s3->tmp.message_type != SSL3_MT_SERVER_HELLO)
s3_clnt.c:906:	d=p=(unsigned char *)s->init_msg;
s3_clnt.c:908:	if ((p[0] != (s->version>>8)) || (p[1] != (s->version&0xff)))
s3_clnt.c:911:		s->version=(s->version&0xff00)|p[1];
s3_clnt.c:919:	memcpy(s->s3->server_random,p,SSL3_RANDOM_SIZE);
s3_clnt.c:925:	if ((j > sizeof s->session->session_id) || (j > SSL3_SESSION_ID_SIZE))
s3_clnt.c:934:	if (s->version >= TLS1_VERSION && s->tls_session_secret_cb)
s3_clnt.c:937:		s->session->master_key_length=sizeof(s->session->master_key);
s3_clnt.c:938:		if (s->tls_session_secret_cb(s, s->session->master_key,
s3_clnt.c:939:					     &s->session->master_key_length,
s3_clnt.c:941:					     s->tls_session_secret_cb_arg))
s3_clnt.c:943:			s->session->cipher = pref_cipher ?
s3_clnt.c:945:	    		s->s3->flags |= SSL3_FLAGS_CCS_OK;
s3_clnt.c:950:	if (j != 0 && j == s->session->session_id_length
s3_clnt.c:951:	    && memcmp(p,s->session->session_id,j) == 0)
s3_clnt.c:953:	    if(s->sid_ctx_length != s->session->sid_ctx_length
s3_clnt.c:954:	       || memcmp(s->session->sid_ctx,s->sid_ctx,s->sid_ctx_length))
s3_clnt.c:961:	    s->s3->flags |= SSL3_FLAGS_CCS_OK;
s3_clnt.c:962:	    s->hit=1;
s3_clnt.c:968:		s->hit=0;
s3_clnt.c:969:		if (s->session->session_id_length > 0)
s3_clnt.c:977:		s->session->session_id_length=j;
s3_clnt.c:978:		memcpy(s->session->session_id,p,j); /* j could be 0 */
s3_clnt.c:999:		    !(s->srp_ctx.srp_Mask & SSL_kSRP))
s3_clnt.c:1021:	if (s->session->cipher)
s3_clnt.c:1022:		s->session->cipher_id = s->session->cipher->id;
s3_clnt.c:1023:	if (s->hit && (s->session->cipher_id != c->id))
s3_clnt.c:1027:		if (!(s->options &
s3_clnt.c:1036:	s->s3->tmp.new_cipher=c;
s3_clnt.c:1057:	if (s->session->compress_meth != 0)
s3_clnt.c:1065:	if (s->hit && j != s->session->compress_meth)
s3_clnt.c:1073:	else if (s->options & SSL_OP_NO_COMPRESSION)
s3_clnt.c:1080:		comp=ssl3_comp_find(s->ctx->comp_methods,j);
s3_clnt.c:1090:		s->s3->tmp.new_compression=comp;
s3_clnt.c:1096:	if (s->version >= SSL3_VERSION)
s3_clnt.c:1139:	n=s->method->ssl_get_message(s,
s3_clnt.c:1143:		s->max_cert_list,
s3_clnt.c:1148:	if ((s->s3->tmp.message_type == SSL3_MT_SERVER_KEY_EXCHANGE) ||
s3_clnt.c:1149:		((s->s3->tmp.new_cipher->algorithm_auth & SSL_aKRB5) && 
s3_clnt.c:1150:		(s->s3->tmp.message_type == SSL3_MT_SERVER_DONE)))
s3_clnt.c:1152:		s->s3->tmp.reuse_message=1;
s3_clnt.c:1156:	if (s->s3->tmp.message_type != SSL3_MT_CERTIFICATE)
s3_clnt.c:1162:	p=d=(unsigned char *)s->init_msg;
s3_clnt.c:1212:	if ((s->verify_mode != SSL_VERIFY_NONE) && (i <= 0)
s3_clnt.c:1214:	    && !((s->s3->tmp.new_cipher->algorithm_mkey & SSL_kKRB5) &&
s3_clnt.c:1215:		 (s->s3->tmp.new_cipher->algorithm_auth & SSL_aKRB5))
s3_clnt.c:1219:		al=ssl_verify_alarm_type(s->verify_result);
s3_clnt.c:1223:	ERR_clear_error(); /* but we keep s->verify_result */
s3_clnt.c:1228:	if (s->session->sess_cert) ssl_sess_cert_free(s->session->sess_cert);
s3_clnt.c:1229:	s->session->sess_cert=sc;
s3_clnt.c:1241:	need_cert = ((s->s3->tmp.new_cipher->algorithm_mkey & SSL_kKRB5) &&
s3_clnt.c:1242:	            (s->s3->tmp.new_cipher->algorithm_auth & SSL_aKRB5))
s3_clnt.c:1248:	printf("cipher, alg, nc = %s, %lx, %lx, %d\n", s->s3->tmp.new_cipher->name,
s3_clnt.c:1249:		s->s3->tmp.new_cipher->algorithm_mkey, s->s3->tmp.new_cipher->algorithm_auth, need_cert);
s3_clnt.c:1282:		if (s->session->peer != NULL)
s3_clnt.c:1283:			X509_free(s->session->peer);
s3_clnt.c:1285:		s->session->peer=x;
s3_clnt.c:1292:		if (s->session->peer != NULL)
s3_clnt.c:1293:			X509_free(s->session->peer);
s3_clnt.c:1294:		s->session->peer=NULL;
s3_clnt.c:1296:	s->session->verify_result = s->verify_result;
s3_clnt.c:1340:	n=s->method->ssl_get_message(s,
s3_clnt.c:1344:		s->max_cert_list,
s3_clnt.c:1348:	if (s->s3->tmp.message_type != SSL3_MT_SERVER_KEY_EXCHANGE)
s3_clnt.c:1355:		if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK)
s3_clnt.c:1357:			s->session->sess_cert=ssl_sess_cert_new();
s3_clnt.c:1358:			if (s->ctx->psk_identity_hint)
s3_clnt.c:1359:				OPENSSL_free(s->ctx->psk_identity_hint);
s3_clnt.c:1360:			s->ctx->psk_identity_hint = NULL;
s3_clnt.c:1363:		s->s3->tmp.reuse_message=1;
s3_clnt.c:1367:	param=p=(unsigned char *)s->init_msg;
s3_clnt.c:1368:	if (s->session->sess_cert != NULL)
s3_clnt.c:1371:		if (s->session->sess_cert->peer_rsa_tmp != NULL)
s3_clnt.c:1373:			RSA_free(s->session->sess_cert->peer_rsa_tmp);
s3_clnt.c:1374:			s->session->sess_cert->peer_rsa_tmp=NULL;
s3_clnt.c:1378:		if (s->session->sess_cert->peer_dh_tmp)
s3_clnt.c:1380:			DH_free(s->session->sess_cert->peer_dh_tmp);
s3_clnt.c:1381:			s->session->sess_cert->peer_dh_tmp=NULL;
s3_clnt.c:1385:		if (s->session->sess_cert->peer_ecdh_tmp)
s3_clnt.c:1387:			EC_KEY_free(s->session->sess_cert->peer_ecdh_tmp);
s3_clnt.c:1388:			s->session->sess_cert->peer_ecdh_tmp=NULL;
s3_clnt.c:1394:		s->session->sess_cert=ssl_sess_cert_new();
s3_clnt.c:1400:	alg_k=s->s3->tmp.new_cipher->algorithm_mkey;
s3_clnt.c:1401:	alg_a=s->s3->tmp.new_cipher->algorithm_auth;
s3_clnt.c:1445:		if (s->ctx->psk_identity_hint != NULL)
s3_clnt.c:1446:			OPENSSL_free(s->ctx->psk_identity_hint);
s3_clnt.c:1447:		s->ctx->psk_identity_hint = BUF_strdup(tmp_id_hint);
s3_clnt.c:1448:		if (s->ctx->psk_identity_hint == NULL)
s3_clnt.c:1479:		if (!(s->srp_ctx.N=BN_bin2bn(p,i,NULL)))
s3_clnt.c:1504:		if (!(s->srp_ctx.g=BN_bin2bn(p,i,NULL)))
s3_clnt.c:1530:		if (!(s->srp_ctx.s=BN_bin2bn(p,i,NULL)))
s3_clnt.c:1554:		if (!(s->srp_ctx.B=BN_bin2bn(p,i,NULL)))
s3_clnt.c:1571:			pkey=X509_get_pubkey(s->session->sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);
s3_clnt.c:1578:			pkey=X509_get_pubkey(s->session->sess_cert->peer_pkeys[SSL_PKEY_DSA_SIGN].x509);
s3_clnt.c:1642:			pkey=X509_get_pubkey(s->session->sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);
s3_clnt.c:1648:		s->session->sess_cert->peer_rsa_tmp=rsa;
s3_clnt.c:1738:			pkey=X509_get_pubkey(s->session->sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);
s3_clnt.c:1745:			pkey=X509_get_pubkey(s->session->sess_cert->peer_pkeys[SSL_PKEY_DSA_SIGN].x509);
s3_clnt.c:1749:		s->session->sess_cert->peer_dh_tmp=dh;
s3_clnt.c:1813:		if (SSL_C_IS_EXPORT(s->s3->tmp.new_cipher) &&
s3_clnt.c:1853:			pkey=X509_get_pubkey(s->session->sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);
s3_clnt.c:1857:			pkey=X509_get_pubkey(s->session->sess_cert->peer_pkeys[SSL_PKEY_ECC].x509);
s3_clnt.c:1861:		s->session->sess_cert->peer_ecdh_tmp=ecdh;
s3_clnt.c:1952:					?s->ctx->md5:s->ctx->sha1, NULL);
s3_clnt.c:1953:				EVP_DigestUpdate(&md_ctx,&(s->s3->client_random[0]),SSL3_RANDOM_SIZE);
s3_clnt.c:1954:				EVP_DigestUpdate(&md_ctx,&(s->s3->server_random[0]),SSL3_RANDOM_SIZE);
s3_clnt.c:1980:			EVP_VerifyUpdate(&md_ctx,&(s->s3->client_random[0]),SSL3_RANDOM_SIZE);
s3_clnt.c:1981:			EVP_VerifyUpdate(&md_ctx,&(s->s3->server_random[0]),SSL3_RANDOM_SIZE);
s3_clnt.c:2042:	n=s->method->ssl_get_message(s,
s3_clnt.c:2046:		s->max_cert_list,
s3_clnt.c:2051:	s->s3->tmp.cert_req=0;
s3_clnt.c:2053:	if (s->s3->tmp.message_type == SSL3_MT_SERVER_DONE)
s3_clnt.c:2055:		s->s3->tmp.reuse_message=1;
s3_clnt.c:2059:		if (s->s3->handshake_buffer)
s3_clnt.c:2067:	if (s->s3->tmp.message_type != SSL3_MT_CERTIFICATE_REQUEST)
s3_clnt.c:2075:	if (s->version > SSL3_VERSION)
s3_clnt.c:2077:		if (s->s3->tmp.new_cipher->algorithm_auth & SSL_aNULL)
s3_clnt.c:2085:	p=d=(unsigned char *)s->init_msg;
s3_clnt.c:2098:		s->s3->tmp.ctype[i]= p[i];
s3_clnt.c:2144:			if ((s->options & SSL_OP_NETSCAPE_CA_DN_BUG))
s3_clnt.c:2156:			if (s->options & SSL_OP_NETSCAPE_CA_DN_BUG)
s3_clnt.c:2189:	s->s3->tmp.cert_req=1;
s3_clnt.c:2190:	s->s3->tmp.ctype_num=ctype_num;
s3_clnt.c:2191:	if (s->s3->tmp.ca_names != NULL)
s3_clnt.c:2192:		sk_X509_NAME_pop_free(s->s3->tmp.ca_names,X509_NAME_free);
s3_clnt.c:2193:	s->s3->tmp.ca_names=ca_sk;
s3_clnt.c:2214:	n=s->method->ssl_get_message(s,
s3_clnt.c:2224:	if (s->s3->tmp.message_type == SSL3_MT_FINISHED)
s3_clnt.c:2226:		s->s3->tmp.reuse_message=1;
s3_clnt.c:2229:	if (s->s3->tmp.message_type != SSL3_MT_NEWSESSION_TICKET)
s3_clnt.c:2243:	p=d=(unsigned char *)s->init_msg;
s3_clnt.c:2244:	n2l(p, s->session->tlsext_tick_lifetime_hint);
s3_clnt.c:2253:	if (s->session->tlsext_tick)
s3_clnt.c:2255:		OPENSSL_free(s->session->tlsext_tick);
s3_clnt.c:2256:		s->session->tlsext_ticklen = 0;
s3_clnt.c:2258:	s->session->tlsext_tick = OPENSSL_malloc(ticklen);
s3_clnt.c:2259:	if (!s->session->tlsext_tick)
s3_clnt.c:2264:	memcpy(s->session->tlsext_tick, p, ticklen);
s3_clnt.c:2265:	s->session->tlsext_ticklen = ticklen;
s3_clnt.c:2282:			s->session->session_id, &s->session->session_id_length,
s3_clnt.c:2302:	n=s->method->ssl_get_message(s,
s3_clnt.c:2317:	p = (unsigned char *)s->init_msg;
s3_clnt.c:2331:	if (s->tlsext_ocsp_resp)
s3_clnt.c:2332:		OPENSSL_free(s->tlsext_ocsp_resp);
s3_clnt.c:2333:	s->tlsext_ocsp_resp = BUF_memdup(p, resplen);
s3_clnt.c:2334:	if (!s->tlsext_ocsp_resp)
s3_clnt.c:2340:	s->tlsext_ocsp_resplen = resplen;
s3_clnt.c:2341:	if (s->ctx->tlsext_status_cb)
s3_clnt.c:2344:		ret = s->ctx->tlsext_status_cb(s, s->ctx->tlsext_status_arg);
s3_clnt.c:2370:	n=s->method->ssl_get_message(s,
s3_clnt.c:2411:	if (s->state == SSL3_ST_CW_KEY_EXCH_A)
s3_clnt.c:2413:		d=(unsigned char *)s->init_buf->data;
s3_clnt.c:2416:		alg_k=s->s3->tmp.new_cipher->algorithm_mkey;
s3_clnt.c:2426:			if (s->session->sess_cert == NULL)
s3_clnt.c:2433:			if (s->session->sess_cert->peer_rsa_tmp != NULL)
s3_clnt.c:2434:				rsa=s->session->sess_cert->peer_rsa_tmp;
s3_clnt.c:2437:				pkey=X509_get_pubkey(s->session->sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);
s3_clnt.c:2449:			tmp_buf[0]=s->client_version>>8;
s3_clnt.c:2450:			tmp_buf[1]=s->client_version&0xff;
s3_clnt.c:2454:			s->session->master_key_length=sizeof tmp_buf;
s3_clnt.c:2458:			if (s->version > SSL3_VERSION)
s3_clnt.c:2463:			if (s->options & SSL_OP_PKCS1_CHECK_1) p[1]++;
s3_clnt.c:2464:			if (s->options & SSL_OP_PKCS1_CHECK_2) tmp_buf[0]=0x70;
s3_clnt.c:2473:			if (s->version > SSL3_VERSION)
s3_clnt.c:2479:			s->session->master_key_length=
s3_clnt.c:2480:				s->method->ssl3_enc->generate_master_secret(s,
s3_clnt.c:2481:					s->session->master_key,
s3_clnt.c:2490:			KSSL_CTX	*kssl_ctx = s->kssl_ctx;
s3_clnt.c:2579:			    tmp_buf[0]=s->client_version>>8;
s3_clnt.c:2580:			    tmp_buf[1]=s->client_version&0xff;
s3_clnt.c:2611:			s->session->master_key_length=
s3_clnt.c:2612:				s->method->ssl3_enc->generate_master_secret(s,
s3_clnt.c:2613:					s->session->master_key,
s3_clnt.c:2625:			if (s->session->sess_cert == NULL) 
s3_clnt.c:2632:			if (s->session->sess_cert->peer_dh_tmp != NULL)
s3_clnt.c:2633:				dh_srvr=s->session->sess_cert->peer_dh_tmp;
s3_clnt.c:2668:			s->session->master_key_length=
s3_clnt.c:2669:				s->method->ssl3_enc->generate_master_secret(s,
s3_clnt.c:2670:					s->session->master_key,p,n);
s3_clnt.c:2694:			if (s->session->sess_cert == NULL) 
s3_clnt.c:2706:			if ((alg_k & (SSL_kECDHr|SSL_kECDHe)) && (s->cert != NULL)) 
s3_clnt.c:2722:				 * if ((s->cert->key->privatekey != NULL) &&
s3_clnt.c:2723:				 *     (s->cert->key->privatekey->type ==
s3_clnt.c:2729:			if (s->session->sess_cert->peer_ecdh_tmp != NULL)
s3_clnt.c:2731:				tkey = s->session->sess_cert->peer_ecdh_tmp;
s3_clnt.c:2736:				srvr_pub_pkey = X509_get_pubkey(s->session-> \
s3_clnt.c:2778:				tkey = s->cert->key->privatekey->pkey.ec;
s3_clnt.c:2821:			s->session->master_key_length = s->method->ssl3_enc \
s3_clnt.c:2823:				s->session->master_key,
s3_clnt.c:2891:			peer_cert=s->session->sess_cert->peer_pkeys[(keytype=SSL_PKEY_GOST01)].x509;
s3_clnt.c:2893:				peer_cert=s->session->sess_cert->peer_pkeys[(keytype=SSL_PKEY_GOST94)].x509;
s3_clnt.c:2912:			if (s->s3->tmp.cert_req && s->cert->key->privatekey) {
s3_clnt.c:2913:				if (EVP_PKEY_derive_set_peer(pkey_ctx,s->cert->key->privatekey) <=0) {
s3_clnt.c:2924:			EVP_DigestUpdate(ukm_hash,s->s3->client_random,SSL3_RANDOM_SIZE);
s3_clnt.c:2925:			EVP_DigestUpdate(ukm_hash,s->s3->server_random,SSL3_RANDOM_SIZE);
s3_clnt.c:2959:				s->s3->flags |= TLS1_FLAGS_SKIP_CERT_VERIFY;
s3_clnt.c:2962:			s->session->master_key_length=
s3_clnt.c:2963:				s->method->ssl3_enc->generate_master_secret(s,
s3_clnt.c:2964:					s->session->master_key,premaster_secret,32);
s3_clnt.c:2971:			if (s->srp_ctx.A != NULL)
s3_clnt.c:2974:				n=BN_num_bytes(s->srp_ctx.A);
s3_clnt.c:2976:				BN_bn2bin(s->srp_ctx.A,p);
s3_clnt.c:2984:			if (s->session->srp_username != NULL)
s3_clnt.c:2985:				OPENSSL_free(s->session->srp_username);
s3_clnt.c:2986:			s->session->srp_username = BUF_strdup(s->srp_ctx.login);
s3_clnt.c:2987:			if (s->session->srp_username == NULL)
s3_clnt.c:2994:			if ((s->session->master_key_length = SRP_generate_client_master_secret(s,s->session->master_key))<0)
s3_clnt.c:3015:			if (s->psk_client_callback == NULL)
s3_clnt.c:3023:			psk_len = s->psk_client_callback(s, s->ctx->psk_identity_hint,
s3_clnt.c:3055:			if (s->session->psk_identity_hint != NULL)
s3_clnt.c:3056:				OPENSSL_free(s->session->psk_identity_hint);
s3_clnt.c:3057:			s->session->psk_identity_hint = BUF_strdup(s->ctx->psk_identity_hint);
s3_clnt.c:3058:			if (s->ctx->psk_identity_hint != NULL &&
s3_clnt.c:3059:				s->session->psk_identity_hint == NULL)
s3_clnt.c:3066:			if (s->session->psk_identity != NULL)
s3_clnt.c:3067:				OPENSSL_free(s->session->psk_identity);
s3_clnt.c:3068:			s->session->psk_identity = BUF_strdup(identity);
s3_clnt.c:3069:			if (s->session->psk_identity == NULL)
s3_clnt.c:3076:			s->session->master_key_length =
s3_clnt.c:3077:				s->method->ssl3_enc->generate_master_secret(s,
s3_clnt.c:3078:					s->session->master_key,
s3_clnt.c:3106:		s->state=SSL3_ST_CW_KEY_EXCH_B;
s3_clnt.c:3108:		s->init_num=n+4;
s3_clnt.c:3109:		s->init_off=0;
s3_clnt.c:3138:	if (s->state == SSL3_ST_CW_CERT_VRFY_A)
s3_clnt.c:3140:		d=(unsigned char *)s->init_buf->data;
s3_clnt.c:3142:		pkey=s->cert->key->privatekey;
s3_clnt.c:3149:				s->method->ssl3_enc->cert_verify_mac(s,
s3_clnt.c:3164:			const EVP_MD *md = s->cert->key->digest;
s3_clnt.c:3165:			hdatalen = BIO_get_mem_data(s->s3->handshake_buffer,
s3_clnt.c:3195:			s->method->ssl3_enc->cert_verify_mac(s,
s3_clnt.c:3248:		s->method->ssl3_enc->cert_verify_mac(s,
s3_clnt.c:3270:		s->state=SSL3_ST_CW_CERT_VRFY_B;
s3_clnt.c:3271:		s->init_num=(int)n+4;
s3_clnt.c:3272:		s->init_off=0;
s3_clnt.c:3290:	if (s->state ==	SSL3_ST_CW_CERT_A)
s3_clnt.c:3292:		if ((s->cert == NULL) ||
s3_clnt.c:3293:			(s->cert->key->x509 == NULL) ||
s3_clnt.c:3294:			(s->cert->key->privatekey == NULL))
s3_clnt.c:3295:			s->state=SSL3_ST_CW_CERT_B;
s3_clnt.c:3297:			s->state=SSL3_ST_CW_CERT_C;
s3_clnt.c:3301:	if (s->state == SSL3_ST_CW_CERT_B)
s3_clnt.c:3310:			s->rwstate=SSL_X509_LOOKUP;
s3_clnt.c:3313:		s->rwstate=SSL_NOTHING;
s3_clnt.c:3316:			s->state=SSL3_ST_CW_CERT_B;
s3_clnt.c:3331:			if (s->version == SSL3_VERSION)
s3_clnt.c:3333:				s->s3->tmp.cert_req=0;
s3_clnt.c:3339:				s->s3->tmp.cert_req=2;
s3_clnt.c:3344:		s->state=SSL3_ST_CW_CERT_C;
s3_clnt.c:3347:	if (s->state == SSL3_ST_CW_CERT_C)
s3_clnt.c:3349:		s->state=SSL3_ST_CW_CERT_D;
s3_clnt.c:3351:			(s->s3->tmp.cert_req == 2)?NULL:s->cert->key->x509);
s3_clnt.c:3352:		s->init_num=(int)l;
s3_clnt.c:3353:		s->init_off=0;
s3_clnt.c:3374:	alg_k=s->s3->tmp.new_cipher->algorithm_mkey;
s3_clnt.c:3375:	alg_a=s->s3->tmp.new_cipher->algorithm_auth;
s3_clnt.c:3381:	sc=s->session->sess_cert;
s3_clnt.c:3389:	rsa=s->session->sess_cert->peer_rsa_tmp;
s3_clnt.c:3392:	dh=s->session->sess_cert->peer_dh_tmp;
s3_clnt.c:3460:	if (SSL_C_IS_EXPORT(s->s3->tmp.new_cipher) && !has_bits(i,EVP_PKT_EXP))
s3_clnt.c:3466:			    || RSA_size(rsa)*8 > SSL_C_EXPORT_PKEYLENGTH(s->s3->tmp.new_cipher))
s3_clnt.c:3478:				|| DH_size(dh)*8 > SSL_C_EXPORT_PKEYLENGTH(s->s3->tmp.new_cipher))
s3_clnt.c:3504:	if (s->state == SSL3_ST_CW_NEXT_PROTO_A)
s3_clnt.c:3506:		len = s->next_proto_negotiated_len;
s3_clnt.c:3508:		d = (unsigned char *)s->init_buf->data;
s3_clnt.c:3510:		memcpy(d + 5, s->next_proto_negotiated, len);
s3_clnt.c:3515:		s->state = SSL3_ST_CW_NEXT_PROTO_B;
s3_clnt.c:3516:		s->init_num = 4 + 2 + len + padding_len;
s3_clnt.c:3517:		s->init_off = 0;
s3_clnt.c:3535:	if (!s->session->tlsext_tick)
s3_clnt.c:3539:	n=s->method->ssl_get_message(s,
s3_clnt.c:3543:		s->max_cert_list,
s3_clnt.c:3546:	s->s3->tmp.reuse_message = 1;
s3_clnt.c:3547:	if ((s->s3->tmp.message_type == SSL3_MT_FINISHED)
s3_clnt.c:3548:		|| (s->s3->tmp.message_type == SSL3_MT_NEWSESSION_TICKET))
s3_clnt.c:3559:	if (s->ctx->client_cert_engine)
s3_clnt.c:3561:		i = ENGINE_load_ssl_client_cert(s->ctx->client_cert_engine, s,
s3_clnt.c:3568:	if (s->ctx->client_cert_cb)
s3_clnt.c:3569:		i = s->ctx->client_cert_cb(s,px509,ppkey);
ssl_lib.c:188:	if (s->method == NULL)
ssl_lib.c:196:		SSL_SESSION_free(s->session);
ssl_lib.c:197:		s->session=NULL;
ssl_lib.c:200:	s->error=0;
ssl_lib.c:201:	s->hit=0;
ssl_lib.c:202:	s->shutdown=0;
ssl_lib.c:208:	if (s->renegotiate) return(1);
ssl_lib.c:210:	if (s->renegotiate)
ssl_lib.c:217:	s->type=0;
ssl_lib.c:219:	s->state=SSL_ST_BEFORE|((s->server)?SSL_ST_ACCEPT:SSL_ST_CONNECT);
ssl_lib.c:221:	s->version=s->method->version;
ssl_lib.c:222:	s->client_version=s->version;
ssl_lib.c:223:	s->rwstate=SSL_NOTHING;
ssl_lib.c:224:	s->rstate=SSL_ST_READ_HEADER;
ssl_lib.c:226:	s->read_ahead=s->ctx->read_ahead;
ssl_lib.c:229:	if (s->init_buf != NULL)
ssl_lib.c:231:		BUF_MEM_free(s->init_buf);
ssl_lib.c:232:		s->init_buf=NULL;
ssl_lib.c:236:	ssl_clear_hash_ctx(&s->read_hash);
ssl_lib.c:237:	ssl_clear_hash_ctx(&s->write_hash);
ssl_lib.c:239:	s->first_packet=0;
ssl_lib.c:244:	if (!s->in_handshake && (s->session == NULL) && (s->method != s->ctx->method))
ssl_lib.c:246:		s->method->ssl_free(s);
ssl_lib.c:247:		s->method=s->ctx->method;
ssl_lib.c:248:		if (!s->method->ssl_new(s))
ssl_lib.c:253:		s->method->ssl_clear(s);
ssl_lib.c:256:	BUF_MEM_free(s->orig_cert_buf);
ssl_lib.c:257:	s->orig_cert_buf = NULL;
ssl_lib.c:301:	s->kssl_ctx = kssl_ctx_new();
ssl_lib.c:304:	s->options=ctx->options;
ssl_lib.c:305:	s->mode=ctx->mode;
ssl_lib.c:306:	s->max_cert_list=ctx->max_cert_list;
ssl_lib.c:316:		 * used to be known as s->ctx->default_cert).
ssl_lib.c:320:		s->cert = ssl_cert_dup(ctx->cert);
ssl_lib.c:321:		if (s->cert == NULL)
ssl_lib.c:325:		s->cert=NULL; /* Cannot really happen (see SSL_CTX_new) */
ssl_lib.c:330:		s->ttpa_enabled = 1;
ssl_lib.c:332:			s->orig_cert = ssl_cert_dup(ctx->orig_cert);
ssl_lib.c:336:			if (s->orig_cert == NULL)
ssl_lib.c:339:			s->orig_cert = NULL;
ssl_lib.c:345:		s->mb_enabled = 1;
ssl_lib.c:348:	s->read_ahead=ctx->read_ahead;
ssl_lib.c:349:	s->msg_callback=ctx->msg_callback;
ssl_lib.c:350:	s->msg_callback_arg=ctx->msg_callback_arg;
ssl_lib.c:351:	s->verify_mode=ctx->verify_mode;
ssl_lib.c:353:	s->verify_depth=ctx->verify_depth;
ssl_lib.c:355:	s->sid_ctx_length=ctx->sid_ctx_length;
ssl_lib.c:356:	OPENSSL_assert(s->sid_ctx_length <= sizeof s->sid_ctx);
ssl_lib.c:357:	memcpy(&s->sid_ctx,&ctx->sid_ctx,sizeof(s->sid_ctx));
ssl_lib.c:358:	s->verify_callback=ctx->default_verify_callback;
ssl_lib.c:359:	s->generate_session_id=ctx->generate_session_id;
ssl_lib.c:361:	s->param = X509_VERIFY_PARAM_new();
ssl_lib.c:362:	if (!s->param)
ssl_lib.c:364:	X509_VERIFY_PARAM_inherit(s->param, ctx->param);
ssl_lib.c:366:	s->purpose = ctx->purpose;
ssl_lib.c:367:	s->trust = ctx->trust;
ssl_lib.c:369:	s->quiet_shutdown=ctx->quiet_shutdown;
ssl_lib.c:370:	s->max_send_fragment = ctx->max_send_fragment;
ssl_lib.c:373:	s->ctx=ctx;
ssl_lib.c:375:	s->tlsext_debug_cb = 0;
ssl_lib.c:376:	s->tlsext_debug_arg = NULL;
ssl_lib.c:377:	s->tlsext_ticket_expected = 0;
ssl_lib.c:378:	s->tlsext_status_type = -1;
ssl_lib.c:379:	s->tlsext_status_expected = 0;
ssl_lib.c:380:	s->tlsext_ocsp_ids = NULL;
ssl_lib.c:381:	s->tlsext_ocsp_exts = NULL;
ssl_lib.c:382:	s->tlsext_ocsp_resp = NULL;
ssl_lib.c:383:	s->tlsext_ocsp_resplen = -1;
ssl_lib.c:385:	s->initial_ctx=ctx;
ssl_lib.c:387:	s->next_proto_negotiated = NULL;
ssl_lib.c:391:	s->verify_result=X509_V_OK;
ssl_lib.c:393:	s->method=ctx->method;
ssl_lib.c:395:	if (!s->method->ssl_new(s))
ssl_lib.c:398:	s->references=1;
ssl_lib.c:399:	s->server=(ctx->method->ssl_accept == ssl_undefined_function)?0:1;
ssl_lib.c:403:	CRYPTO_new_ex_data(CRYPTO_EX_INDEX_SSL, s, &s->ex_data);
ssl_lib.c:409:	if (s->ctx->cc)
ssl_lib.c:411:		s->cc = OPENSSL_malloc(s->ctx->cc_len);
ssl_lib.c:412:		if (s->cc == NULL)
ssl_lib.c:414:		memcpy(s->cc, s->ctx->cc, s->ctx->cc_len);
ssl_lib.c:415:		s->cc_len = s->ctx->cc_len;
ssl_lib.c:420:	s->psk_client_callback=ctx->psk_client_callback;
ssl_lib.c:421:	s->psk_server_callback=ctx->psk_server_callback;
ssl_lib.c:428:		if (s->cert != NULL)
ssl_lib.c:429:			ssl_cert_free(s->cert);
ssl_lib.c:430:		if (s->ctx != NULL)
ssl_lib.c:431:			SSL_CTX_free(s->ctx); /* decrement reference count */
ssl_lib.c:518:	return X509_VERIFY_PARAM_set_purpose(s->param, purpose);
ssl_lib.c:523:	return X509_VERIFY_PARAM_set_purpose(s->param, purpose);
ssl_lib.c:528:	return X509_VERIFY_PARAM_set_trust(s->param, trust);
ssl_lib.c:533:	return X509_VERIFY_PARAM_set_trust(s->param, trust);
ssl_lib.c:553:	i=CRYPTO_add(&s->references,-1,CRYPTO_LOCK_SSL);
ssl_lib.c:566:	if (s->param)
ssl_lib.c:567:		X509_VERIFY_PARAM_free(s->param);
ssl_lib.c:569:	CRYPTO_free_ex_data(CRYPTO_EX_INDEX_SSL, s, &s->ex_data);
ssl_lib.c:571:	if (s->bbio != NULL)
ssl_lib.c:574:		if (s->bbio == s->wbio)
ssl_lib.c:576:			s->wbio=BIO_pop(s->wbio);
ssl_lib.c:578:		BIO_free(s->bbio);
ssl_lib.c:579:		s->bbio=NULL;
ssl_lib.c:581:	if (s->rbio != NULL)
ssl_lib.c:582:		BIO_free_all(s->rbio);
ssl_lib.c:583:	if ((s->wbio != NULL) && (s->wbio != s->rbio))
ssl_lib.c:584:		BIO_free_all(s->wbio);
ssl_lib.c:586:	if (s->init_buf != NULL) BUF_MEM_free(s->init_buf);
ssl_lib.c:589:	if (s->cipher_list != NULL) sk_SSL_CIPHER_free(s->cipher_list);
ssl_lib.c:590:	if (s->cipher_list_by_id != NULL) sk_SSL_CIPHER_free(s->cipher_list_by_id);
ssl_lib.c:593:	if (s->session != NULL)
ssl_lib.c:596:		SSL_SESSION_free(s->session);
ssl_lib.c:600:	ssl_clear_hash_ctx(&s->read_hash);
ssl_lib.c:601:	ssl_clear_hash_ctx(&s->write_hash);
ssl_lib.c:603:	if (s->cert != NULL) ssl_cert_free(s->cert);
ssl_lib.c:607:	if (s->tlsext_hostname)
ssl_lib.c:608:		OPENSSL_free(s->tlsext_hostname);
ssl_lib.c:609:	if (s->initial_ctx) SSL_CTX_free(s->initial_ctx);
ssl_lib.c:611:	if (s->tlsext_ecpointformatlist) OPENSSL_free(s->tlsext_ecpointformatlist);
ssl_lib.c:612:	if (s->tlsext_ellipticcurvelist) OPENSSL_free(s->tlsext_ellipticcurvelist);
ssl_lib.c:614:	if (s->tlsext_opaque_prf_input) OPENSSL_free(s->tlsext_opaque_prf_input);
ssl_lib.c:615:	if (s->tlsext_ocsp_exts)
ssl_lib.c:616:		sk_X509_EXTENSION_pop_free(s->tlsext_ocsp_exts,
ssl_lib.c:618:	if (s->tlsext_ocsp_ids)
ssl_lib.c:619:		sk_OCSP_RESPID_pop_free(s->tlsext_ocsp_ids, OCSP_RESPID_free);
ssl_lib.c:620:	if (s->tlsext_ocsp_resp)
ssl_lib.c:621:		OPENSSL_free(s->tlsext_ocsp_resp);
ssl_lib.c:624:	if (s->client_CA != NULL)
ssl_lib.c:625:		sk_X509_NAME_pop_free(s->client_CA,X509_NAME_free);
ssl_lib.c:627:	if (s->method != NULL) s->method->ssl_free(s);
ssl_lib.c:629:	if (s->ctx) SSL_CTX_free(s->ctx);
ssl_lib.c:632:	if (s->kssl_ctx != NULL)
ssl_lib.c:633:		kssl_ctx_free(s->kssl_ctx);
ssl_lib.c:637:	if (s->next_proto_negotiated)
ssl_lib.c:638:		OPENSSL_free(s->next_proto_negotiated);
ssl_lib.c:642:        if (s->srtp_profiles)
ssl_lib.c:643:            sk_SRTP_PROTECTION_PROFILE_free(s->srtp_profiles);
ssl_lib.c:647:	ssl_cert_free(s->orig_cert);
ssl_lib.c:648:	BUF_MEM_free(s->orig_cert_buf);
ssl_lib.c:658:	if (s->bbio != NULL)
ssl_lib.c:660:		if (s->wbio == s->bbio)
ssl_lib.c:662:			s->wbio=s->wbio->next_bio;
ssl_lib.c:663:			s->bbio->next_bio=NULL;
ssl_lib.c:666:	if ((s->rbio != NULL) && (s->rbio != rbio))
ssl_lib.c:667:		BIO_free_all(s->rbio);
ssl_lib.c:668:	if ((s->wbio != NULL) && (s->wbio != wbio) && (s->rbio != s->wbio))
ssl_lib.c:669:		BIO_free_all(s->wbio);
ssl_lib.c:670:	s->rbio=rbio;
ssl_lib.c:671:	s->wbio=wbio;
ssl_lib.c:675:	{ return(s->rbio); }
ssl_lib.c:678:	{ return(s->wbio); }
ssl_lib.c:734:	if ((s->rbio == NULL) || (BIO_method_type(s->rbio) != BIO_TYPE_SOCKET)
ssl_lib.c:735:		|| ((int)BIO_get_fd(s->rbio,NULL) != fd))
ssl_lib.c:756:	if ((s->wbio == NULL) || (BIO_method_type(s->wbio) != BIO_TYPE_SOCKET)
ssl_lib.c:757:		|| ((int)BIO_get_fd(s->wbio,NULL) != fd))
ssl_lib.c:783:	if (s->s3 != NULL)
ssl_lib.c:785:		ret = s->s3->tmp.finish_md_len;
ssl_lib.c:788:		memcpy(buf, s->s3->tmp.finish_md, count);
ssl_lib.c:798:	if (s->s3 != NULL)
ssl_lib.c:800:		ret = s->s3->tmp.peer_finish_md_len;
ssl_lib.c:803:		memcpy(buf, s->s3->tmp.peer_finish_md, count);
ssl_lib.c:811:	return(s->verify_mode);
ssl_lib.c:816:	return X509_VERIFY_PARAM_get_depth(s->param);
ssl_lib.c:821:	return(s->verify_callback);
ssl_lib.c:842:	s->verify_mode=mode;
ssl_lib.c:844:		s->verify_callback=callback;
ssl_lib.c:849:	X509_VERIFY_PARAM_set_depth(s->param, depth);
ssl_lib.c:854:	s->read_ahead=yes;
ssl_lib.c:859:	return(s->read_ahead);
ssl_lib.c:871:	return(s->method->ssl_pending(s));
ssl_lib.c:878:	if ((s == NULL) || (s->session == NULL))
ssl_lib.c:881:		r=s->session->peer;
ssl_lib.c:894:	if ((s == NULL) || (s->session == NULL) || (s->session->sess_cert == NULL))
ssl_lib.c:897:		r=s->session->sess_cert->cert_chain;
ssl_lib.c:982:	if (s->handshake_func == 0)
ssl_lib.c:986:	return(s->method->ssl_accept(s));
ssl_lib.c:991:	if (s->handshake_func == 0)
ssl_lib.c:995:	return(s->method->ssl_connect(s));
ssl_lib.c:1000:	return(s->method->get_timeout());
ssl_lib.c:1005:	if (s->handshake_func == 0)
ssl_lib.c:1011:	if (s->shutdown & SSL_RECEIVED_SHUTDOWN)
ssl_lib.c:1013:		s->rwstate=SSL_NOTHING;
ssl_lib.c:1016:	return(s->method->ssl_read(s,buf,num));
ssl_lib.c:1021:	if (s->handshake_func == 0)
ssl_lib.c:1027:	if (s->shutdown & SSL_RECEIVED_SHUTDOWN)
ssl_lib.c:1031:	return(s->method->ssl_peek(s,buf,num));
ssl_lib.c:1036:	if (s->handshake_func == 0)
ssl_lib.c:1042:	if (s->shutdown & SSL_SENT_SHUTDOWN)
ssl_lib.c:1044:		s->rwstate=SSL_NOTHING;
ssl_lib.c:1048:	return(s->method->ssl_write(s,buf,num));
ssl_lib.c:1059:	if (s->handshake_func == 0)
ssl_lib.c:1066:		return(s->method->ssl_shutdown(s));
ssl_lib.c:1073:	if (s->renegotiate == 0)
ssl_lib.c:1074:		s->renegotiate=1;
ssl_lib.c:1076:	s->new_session=1;
ssl_lib.c:1078:	return(s->method->ssl_renegotiate(s));
ssl_lib.c:1083:	if (s->renegotiate == 0)
ssl_lib.c:1084:		s->renegotiate=1;
ssl_lib.c:1086:	s->new_session=0;
ssl_lib.c:1088:	return(s->method->ssl_renegotiate(s));
ssl_lib.c:1095:	return (s->renegotiate != 0);
ssl_lib.c:1105:		return(s->read_ahead);
ssl_lib.c:1107:		l=s->read_ahead;
ssl_lib.c:1108:		s->read_ahead=larg;
ssl_lib.c:1112:		s->msg_callback_arg = parg;
ssl_lib.c:1116:		return(s->options|=larg);
ssl_lib.c:1118:		return(s->options&=~larg);
ssl_lib.c:1120:		return(s->mode|=larg);
ssl_lib.c:1122:		return(s->mode &=~larg);
ssl_lib.c:1124:		return(s->max_cert_list);
ssl_lib.c:1126:		l=s->max_cert_list;
ssl_lib.c:1127:		s->max_cert_list=larg;
ssl_lib.c:1138:			s->d1->mtu = larg;
ssl_lib.c:1145:		s->max_send_fragment = larg;
ssl_lib.c:1148:		if (s->s3)
ssl_lib.c:1149:			return s->s3->send_connection_binding;
ssl_lib.c:1152:		return(s->method->ssl_ctrl(s,cmd,larg,parg));
ssl_lib.c:1161:		s->msg_callback = (void (*)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg))(fp);
ssl_lib.c:1165:		return(s->method->ssl_callback_ctrl(s,cmd,fp));
ssl_lib.c:1295:		if (s->cipher_list != NULL)
ssl_lib.c:1297:			return(s->cipher_list);
ssl_lib.c:1299:		else if ((s->ctx != NULL) &&
ssl_lib.c:1300:			(s->ctx->cipher_list != NULL))
ssl_lib.c:1302:			return(s->ctx->cipher_list);
ssl_lib.c:1314:		if (s->cipher_list_by_id != NULL)
ssl_lib.c:1316:			return(s->cipher_list_by_id);
ssl_lib.c:1318:		else if ((s->ctx != NULL) &&
ssl_lib.c:1319:			(s->ctx->cipher_list_by_id != NULL))
ssl_lib.c:1321:			return(s->ctx->cipher_list_by_id);
ssl_lib.c:1371:	sk=ssl_create_cipher_list(s->ctx->method,&s->cipher_list,
ssl_lib.c:1372:		&s->cipher_list_by_id,str);
ssl_lib.c:1392:	if ((s->session == NULL) || (s->session->ciphers == NULL) ||
ssl_lib.c:1397:	sk=s->session->ciphers;
ssl_lib.c:1431:	int nokrb5 = !kssl_tgt_is_available(s->kssl_ctx);
ssl_lib.c:1437:		put_cb = s->method->put_cipher_by_char;
ssl_lib.c:1454:		    s->psk_client_callback == NULL)
ssl_lib.c:1459:		    !(s->srp_ctx.srp_Mask & SSL_kSRP))
ssl_lib.c:1469:		if (!s->renegotiate)
ssl_lib.c:1482:		if (s->mode & SSL_MODE_SEND_FALLBACK_SCSV)
ssl_lib.c:1503:	if (s->s3)
ssl_lib.c:1504:		s->s3->send_connection_binding = 0;
ssl_lib.c:1523:		if (s->s3 && (n != 3 || !p[0]) &&
ssl_lib.c:1528:			if (s->renegotiate)
ssl_lib.c:1534:			s->s3->send_connection_binding = 1;
ssl_lib.c:1552:				if (s->s3)
ssl_lib.c:1591:	return s->session && !s->tlsext_hostname ?
ssl_lib.c:1592:		s->session->tlsext_hostname :
ssl_lib.c:1593:		s->tlsext_hostname;
ssl_lib.c:1598:	if (s->session && (!s->tlsext_hostname ? s->session->tlsext_hostname : s->tlsext_hostname))
ssl_lib.c:1680:	*data = s->next_proto_negotiated;
ssl_lib.c:1684:		*len = s->next_proto_negotiated_len;
ssl_lib.c:1725:	if (s->version < TLS1_VERSION)
ssl_lib.c:1728:	return s->method->ssl3_enc->export_keying_material(s, out, olen, label,
ssl_lib.c:2322:	const SSL_CIPHER *cs = s->s3->tmp.new_cipher;
ssl_lib.c:2324:	alg_k = cs->algorithm_mkey;
ssl_lib.c:2325:	alg_a = cs->algorithm_auth;
ssl_lib.c:2394:	c=s->cert;
ssl_lib.c:2395:	ssl_set_cert_masks(c, s->s3->tmp.new_cipher);
ssl_lib.c:2397:	alg_k = s->s3->tmp.new_cipher->algorithm_mkey;
ssl_lib.c:2398:	alg_a = s->s3->tmp.new_cipher->algorithm_auth;
ssl_lib.c:2466:	c=s->orig_cert;
ssl_lib.c:2467:	ssl_set_cert_masks(c, s->s3->tmp.new_cipher);
ssl_lib.c:2469:	alg_k = s->s3->tmp.new_cipher->algorithm_mkey;
ssl_lib.c:2470:	alg_a = s->s3->tmp.new_cipher->algorithm_auth;
ssl_lib.c:2533:	s->ttpa_enabled = 1;
ssl_lib.c:2539:	s->ttpa_enabled = 0;
ssl_lib.c:2563:	s->mb_enabled = 1;
ssl_lib.c:2572:	s->mb_enabled = 0;
ssl_lib.c:2602:	c=s->cert;
ssl_lib.c:2633:	if (s->session->session_id_length == 0) return;
ssl_lib.c:2635:	i=s->session_ctx->session_cache_mode;
ssl_lib.c:2636:	if ((i & mode) && (!s->hit)
ssl_lib.c:2638:		    || SSL_CTX_add_session(s->session_ctx,s->session))
ssl_lib.c:2639:		&& (s->session_ctx->new_session_cb != NULL))
ssl_lib.c:2641:		CRYPTO_add(&s->session->references,1,CRYPTO_LOCK_SSL_SESSION);
ssl_lib.c:2642:		if (!s->session_ctx->new_session_cb(s,s->session))
ssl_lib.c:2643:			SSL_SESSION_free(s->session);
ssl_lib.c:2651:			?s->session_ctx->stats.sess_connect_good
ssl_lib.c:2652:			:s->session_ctx->stats.sess_accept_good) & 0xff) == 0xff)
ssl_lib.c:2654:			SSL_CTX_flush_sessions(s->session_ctx,(unsigned long)time(NULL));
ssl_lib.c:2661:	return(s->method);
ssl_lib.c:2669:	if (s->method != meth)
ssl_lib.c:2671:		if (s->handshake_func != NULL)
ssl_lib.c:2672:			conn=(s->handshake_func == s->method->ssl_connect);
ssl_lib.c:2674:		if (s->method->version == meth->version)
ssl_lib.c:2675:			s->method=meth;
ssl_lib.c:2678:			s->method->ssl_free(s);
ssl_lib.c:2679:			s->method=meth;
ssl_lib.c:2680:			ret=s->method->ssl_new(s);
ssl_lib.c:2684:			s->handshake_func=meth->ssl_connect;
ssl_lib.c:2686:			s->handshake_func=meth->ssl_accept;
ssl_lib.c:2719:			 * However if we ever set s->rwstate incorrectly
ssl_lib.c:2763:		if (s->version == SSL2_VERSION)
ssl_lib.c:2770:			if ((s->shutdown & SSL_RECEIVED_SHUTDOWN) &&
ssl_lib.c:2771:				(s->s3->warn_alert == SSL_AD_CLOSE_NOTIFY))
ssl_lib.c:2782:	if (s->handshake_func == NULL)
ssl_lib.c:2788:	s->method->ssl_renegotiate_check(s);
ssl_lib.c:2792:		ret=s->handshake_func(s);
ssl_lib.c:2801:	s->server=1;
ssl_lib.c:2802:	s->shutdown=0;
ssl_lib.c:2803:	s->state=SSL_ST_ACCEPT|SSL_ST_BEFORE;
ssl_lib.c:2804:	s->handshake_func=s->method->ssl_accept;
ssl_lib.c:2807:	ssl_clear_hash_ctx(&s->read_hash);
ssl_lib.c:2808:	ssl_clear_hash_ctx(&s->write_hash);
ssl_lib.c:2813:	s->server=0;
ssl_lib.c:2814:	s->shutdown=0;
ssl_lib.c:2815:	s->state=SSL_ST_CONNECT|SSL_ST_BEFORE;
ssl_lib.c:2816:	s->handshake_func=s->method->ssl_connect;
ssl_lib.c:2819:	ssl_clear_hash_ctx(&s->read_hash);
ssl_lib.c:2820:	ssl_clear_hash_ctx(&s->write_hash);
ssl_lib.c:2849:	if (s->version == TLS1_2_VERSION)
ssl_lib.c:2851:	else if (s->version == TLS1_1_VERSION)
ssl_lib.c:2853:	else if (s->version == TLS1_VERSION)
ssl_lib.c:2855:	else if (s->version == SSL3_VERSION)
ssl_lib.c:2857:	else if (s->version == SSL2_VERSION)
ssl_lib.c:2873:	ret->version = s->version;
ssl_lib.c:2874:	ret->type = s->type;
ssl_lib.c:2875:	ret->method = s->method;
ssl_lib.c:2877:	if (s->session != NULL)
ssl_lib.c:2885:		 * that s->cert or ret->cert will be changed later --
ssl_lib.c:2890:		ret->method = s->method;
ssl_lib.c:2893:		if (s->cert != NULL)
ssl_lib.c:2899:			ret->cert = ssl_cert_dup(s->cert);
ssl_lib.c:2905:			s->sid_ctx, s->sid_ctx_length);
ssl_lib.c:2908:	ret->options=s->options;
ssl_lib.c:2909:	ret->mode=s->mode;
ssl_lib.c:2912:	ret->msg_callback = s->msg_callback;
ssl_lib.c:2913:	ret->msg_callback_arg = s->msg_callback_arg;
ssl_lib.c:2917:	ret->generate_session_id = s->generate_session_id;
ssl_lib.c:2921:	ret->debug=s->debug;
ssl_lib.c:2924:	if (!CRYPTO_dup_ex_data(CRYPTO_EX_INDEX_SSL, &ret->ex_data, &s->ex_data))
ssl_lib.c:2928:	if (s->rbio != NULL)
ssl_lib.c:2930:		if (!BIO_dup_state(s->rbio,(char *)&ret->rbio))
ssl_lib.c:2933:	if (s->wbio != NULL)
ssl_lib.c:2935:		if (s->wbio != s->rbio)
ssl_lib.c:2937:			if (!BIO_dup_state(s->wbio,(char *)&ret->wbio))
ssl_lib.c:2943:	ret->rwstate = s->rwstate;
ssl_lib.c:2944:	ret->in_handshake = s->in_handshake;
ssl_lib.c:2945:	ret->handshake_func = s->handshake_func;
ssl_lib.c:2946:	ret->server = s->server;
ssl_lib.c:2947:	ret->renegotiate = s->renegotiate;
ssl_lib.c:2948:	ret->new_session = s->new_session;
ssl_lib.c:2949:	ret->quiet_shutdown = s->quiet_shutdown;
ssl_lib.c:2950:	ret->shutdown=s->shutdown;
ssl_lib.c:2951:	ret->state=s->state; /* SSL_dup does not really work at any state, though */
ssl_lib.c:2952:	ret->rstate=s->rstate;
ssl_lib.c:2954:	ret->hit=s->hit;
ssl_lib.c:2956:	X509_VERIFY_PARAM_inherit(ret->param, s->param);
ssl_lib.c:2959:	if (s->cipher_list != NULL)
ssl_lib.c:2961:		if ((ret->cipher_list=sk_SSL_CIPHER_dup(s->cipher_list)) == NULL)
ssl_lib.c:2964:	if (s->cipher_list_by_id != NULL)
ssl_lib.c:2965:		if ((ret->cipher_list_by_id=sk_SSL_CIPHER_dup(s->cipher_list_by_id))
ssl_lib.c:2970:	if (s->client_CA != NULL)
ssl_lib.c:2972:		if ((sk=sk_X509_NAME_dup(s->client_CA)) == NULL) goto err;
ssl_lib.c:2996:	if (s->enc_read_ctx != NULL)
ssl_lib.c:2998:		EVP_CIPHER_CTX_cleanup(s->enc_read_ctx);
ssl_lib.c:2999:		OPENSSL_free(s->enc_read_ctx);
ssl_lib.c:3000:		s->enc_read_ctx=NULL;
ssl_lib.c:3002:	if (s->enc_write_ctx != NULL)
ssl_lib.c:3004:		EVP_CIPHER_CTX_cleanup(s->enc_write_ctx);
ssl_lib.c:3005:		OPENSSL_free(s->enc_write_ctx);
ssl_lib.c:3006:		s->enc_write_ctx=NULL;
ssl_lib.c:3009:	if (s->expand != NULL)
ssl_lib.c:3011:		COMP_CTX_free(s->expand);
ssl_lib.c:3012:		s->expand=NULL;
ssl_lib.c:3014:	if (s->compress != NULL)
ssl_lib.c:3016:		COMP_CTX_free(s->compress);
ssl_lib.c:3017:		s->compress=NULL;
ssl_lib.c:3025:	if (s->cc_len)
ssl_lib.c:3026:		return s->cc_len;
ssl_lib.c:3033:	if (s->cc)
ssl_lib.c:3034:		return s->cc;
ssl_lib.c:3041:	if (s->orig_cert_buf && s->orig_cert_buf->data)
ssl_lib.c:3042:		return s->orig_cert_buf->data;
ssl_lib.c:3051:	if (s->cert != NULL)
ssl_lib.c:3052:		return(s->cert->key->x509);
ssl_lib.c:3060:	if (s->cert != NULL)
ssl_lib.c:3061:		return(s->cert->key->privatekey);
ssl_lib.c:3068:	if ((s->session != NULL) && (s->session->cipher != NULL))
ssl_lib.c:3069:		return(s->session->cipher);
ssl_lib.c:3085:	if (s->compress != NULL)
ssl_lib.c:3086:		return(s->compress->meth);
ssl_lib.c:3092:	if (s->expand != NULL)
ssl_lib.c:3093:		return(s->expand->meth);
ssl_lib.c:3102:	if (s->bbio == NULL)
ssl_lib.c:3106:		s->bbio=bbio;
ssl_lib.c:3110:		bbio=s->bbio;
ssl_lib.c:3111:		if (s->bbio == s->wbio)
ssl_lib.c:3112:			s->wbio=BIO_pop(s->wbio);
ssl_lib.c:3123:		if (s->wbio != bbio)
ssl_lib.c:3124:			s->wbio=BIO_push(bbio,s->wbio);
ssl_lib.c:3128:		if (s->wbio == bbio)
ssl_lib.c:3129:			s->wbio=BIO_pop(bbio);
ssl_lib.c:3136:	if (s->bbio == NULL) return;
ssl_lib.c:3138:	if (s->bbio == s->wbio)
ssl_lib.c:3141:		s->wbio=BIO_pop(s->wbio);
ssl_lib.c:3143:		assert(s->wbio != NULL);
ssl_lib.c:3146:	BIO_free(s->bbio);
ssl_lib.c:3147:	s->bbio=NULL;
ssl_lib.c:3162:	s->quiet_shutdown=mode;
ssl_lib.c:3167:	return(s->quiet_shutdown);
ssl_lib.c:3172:	s->shutdown=mode;
ssl_lib.c:3177:	return(s->shutdown);
ssl_lib.c:3182:	return(s->version);
ssl_lib.c:3274:	return(CRYPTO_set_ex_data(&s->ex_data,idx,arg));
ssl_lib.c:3279:	return(CRYPTO_get_ex_data(&s->ex_data,idx));
ssl_lib.c:3291:	return(CRYPTO_set_ex_data(&s->ex_data,idx,arg));
ssl_lib.c:3296:	return(CRYPTO_get_ex_data(&s->ex_data,idx));
ssl_lib.c:3318:	return(s->rwstate);
ssl_lib.c:3418:	if (s->session == NULL)
ssl_lib.c:3426:	if (s->session->psk_identity_hint != NULL)
ssl_lib.c:3427:		OPENSSL_free(s->session->psk_identity_hint);
ssl_lib.c:3430:		s->session->psk_identity_hint = BUF_strdup(identity_hint);
ssl_lib.c:3431:		if (s->session->psk_identity_hint == NULL)
ssl_lib.c:3435:		s->session->psk_identity_hint = NULL;
ssl_lib.c:3441:	if (s == NULL || s->session == NULL)
ssl_lib.c:3443:	return(s->session->psk_identity_hint);
ssl_lib.c:3448:	if (s == NULL || s->session == NULL)
ssl_lib.c:3450:	return(s->session->psk_identity);
ssl_lib.c:3458:	s->psk_client_callback = cb;
ssl_lib.c:3473:	s->psk_server_callback = cb;
ssl_lib.c:3515:	s->debug = debug;
ssl_lib.c:3520:	return s->hit;
tls1.h:177:		((s->version >> 8) == TLS1_VERSION_MAJOR ? s->version : 0)
tls1.h:180:		((s->client_version >> 8) == TLS1_VERSION_MAJOR ? s->client_version : 0)
tls1.h:237: * http://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml
tls1.h:238: * http://tools.ietf.org/html/draft-agl-tls-padding-03
tls1.h:245:/* ExtensionType value from draft-rescorla-tls-opaque-prf-input-00.txt */
tls1.h:268:/* ECPointFormat values from draft-ietf-tls-ecc-12 */
tls1.h:388: * draft-ietf-tls-56-bit-ciphersuites-01.txt
tls1.h:471:/* ECC ciphersuites from draft-ietf-tls-ecc-12.txt with changes soon to be in draft 13 */
tls1.h:564:/* ECC ciphersuites from draft-ietf-tls-ecc-01.txt (Mar 15, 2001) */
ssl_locl.h:625:#define SSL_IS_DTLS(s) (s->method->version == DTLS1_VERSION)
t1_lib.c:156:	s->method->ssl_clear(s);
t1_lib.c:163:	if (s->tlsext_session_ticket)
t1_lib.c:165:		OPENSSL_free(s->tlsext_session_ticket);
t1_lib.c:174:	s->version = s->method->version;
t1_lib.c:239:	/* ECC curves from draft-ietf-tls-ecc-12.txt (Oct. 17, 2005) */
t1_lib.c:248:	/* ECC curves from draft-ietf-tls-ecc-12.txt (Oct. 17, 2005) */
t1_lib.c:365:	if (s->client_version == SSL3_VERSION
t1_lib.c:366:					&& !s->s3->send_connection_binding)
t1_lib.c:373: 	if (s->tlsext_hostname != NULL)
t1_lib.c:388:		    || (size_str = strlen(s->tlsext_hostname)) > (unsigned long)lenmax) 
t1_lib.c:401:		memcpy(ret, s->tlsext_hostname, size_str);
t1_lib.c:406:        if (s->renegotiate)
t1_lib.c:431:		if (s->ttpa_enabled)
t1_lib.c:456:		if (s->mb_enabled)
t1_lib.c:482:	if (s->srp_ctx.login != NULL)
t1_lib.c:485:		int login_len = strlen(s->srp_ctx.login);	
t1_lib.c:503:		memcpy(ret, s->srp_ctx.login, login_len);
t1_lib.c:509:	if (s->tlsext_ecpointformatlist != NULL)
t1_lib.c:515:		if (s->tlsext_ecpointformatlist_length > (unsigned long)lenmax) return NULL;
t1_lib.c:516:		if (s->tlsext_ecpointformatlist_length > 255)
t1_lib.c:523:		s2n(s->tlsext_ecpointformatlist_length + 1,ret);
t1_lib.c:524:		*(ret++) = (unsigned char) s->tlsext_ecpointformatlist_length;
t1_lib.c:525:		memcpy(ret, s->tlsext_ecpointformatlist, s->tlsext_ecpointformatlist_length);
t1_lib.c:526:		ret+=s->tlsext_ecpointformatlist_length;
t1_lib.c:528:	if (s->tlsext_ellipticcurvelist != NULL)
t1_lib.c:534:		if (s->tlsext_ellipticcurvelist_length > (unsigned long)lenmax) return NULL;
t1_lib.c:535:		if (s->tlsext_ellipticcurvelist_length > 65532)
t1_lib.c:542:		s2n(s->tlsext_ellipticcurvelist_length + 2, ret);
t1_lib.c:544:		/* NB: draft-ietf-tls-ecc-12.txt uses a one-byte prefix for
t1_lib.c:549:		s2n(s->tlsext_ellipticcurvelist_length, ret);
t1_lib.c:550:		memcpy(ret, s->tlsext_ellipticcurvelist, s->tlsext_ellipticcurvelist_length);
t1_lib.c:551:		ret+=s->tlsext_ellipticcurvelist_length;
t1_lib.c:558:		if (!s->new_session && s->session && s->session->tlsext_tick)
t1_lib.c:559:			ticklen = s->session->tlsext_ticklen;
t1_lib.c:560:		else if (s->session && s->tlsext_session_ticket &&
t1_lib.c:561:			 s->tlsext_session_ticket->data)
t1_lib.c:563:			ticklen = s->tlsext_session_ticket->length;
t1_lib.c:564:			s->session->tlsext_tick = OPENSSL_malloc(ticklen);
t1_lib.c:565:			if (!s->session->tlsext_tick)
t1_lib.c:567:			memcpy(s->session->tlsext_tick,
t1_lib.c:568:			       s->tlsext_session_ticket->data,
t1_lib.c:570:			s->session->tlsext_ticklen = ticklen;
t1_lib.c:574:		if (ticklen == 0 && s->tlsext_session_ticket &&
t1_lib.c:575:		    s->tlsext_session_ticket->data == NULL)
t1_lib.c:585:			memcpy(ret, s->session->tlsext_tick, ticklen);
t1_lib.c:603:	if (s->s3->client_opaque_prf_input != NULL &&
t1_lib.c:604:	    s->version != DTLS1_VERSION)
t1_lib.c:606:		size_t col = s->s3->client_opaque_prf_input_len;
t1_lib.c:616:		memcpy(ret, s->s3->client_opaque_prf_input, col);
t1_lib.c:621:	if (s->tlsext_status_type == TLSEXT_STATUSTYPE_ocsp &&
t1_lib.c:622:	    s->version != DTLS1_VERSION)
t1_lib.c:629:		for (i = 0; i < sk_OCSP_RESPID_num(s->tlsext_ocsp_ids); i++)
t1_lib.c:631:			id = sk_OCSP_RESPID_value(s->tlsext_ocsp_ids, i);
t1_lib.c:638:		if (s->tlsext_ocsp_exts)
t1_lib.c:640:			extlen = i2d_X509_EXTENSIONS(s->tlsext_ocsp_exts, NULL);
t1_lib.c:654:		for (i = 0; i < sk_OCSP_RESPID_num(s->tlsext_ocsp_ids); i++)
t1_lib.c:658:			id = sk_OCSP_RESPID_value(s->tlsext_ocsp_ids, i);
t1_lib.c:667:			i2d_X509_EXTENSIONS(s->tlsext_ocsp_exts, &ret);
t1_lib.c:680:	if (s->tlsext_heartbeat & SSL_TLSEXT_HB_DONT_RECV_REQUESTS)
t1_lib.c:687:	if (s->ctx->next_proto_select_cb && !s->s3->tmp.finish_md_len)
t1_lib.c:719:	 * See https://tools.ietf.org/html/draft-agl-tls-padding-03
t1_lib.c:724:	if (s->options & SSL_OP_TLSEXT_PADDING)
t1_lib.c:726:		int hlen = ret - (unsigned char *)s->init_buf->data;
t1_lib.c:731:		if (s->state == SSL23_ST_CW_CLNT_HELLO_A)
t1_lib.c:765:	if (s->version == SSL3_VERSION && !s->s3->send_connection_binding)
t1_lib.c:772:	if (s->ttpa_enabled)
t1_lib.c:799:	if (s->mb_enabled)
t1_lib.c:831:	if (!s->hit && s->servername_done == 1 && s->session->tlsext_hostname != NULL)
t1_lib.c:839:	if(s->s3->send_connection_binding)
t1_lib.c:864:	if (s->tlsext_ecpointformatlist != NULL)
t1_lib.c:870:		if (s->tlsext_ecpointformatlist_length > (unsigned long)lenmax) return NULL;
t1_lib.c:871:		if (s->tlsext_ecpointformatlist_length > 255)
t1_lib.c:878:		s2n(s->tlsext_ecpointformatlist_length + 1,ret);
t1_lib.c:879:		*(ret++) = (unsigned char) s->tlsext_ecpointformatlist_length;
t1_lib.c:880:		memcpy(ret, s->tlsext_ecpointformatlist, s->tlsext_ecpointformatlist_length);
t1_lib.c:881:		ret+=s->tlsext_ecpointformatlist_length;
t1_lib.c:887:	if (s->tlsext_ticket_expected
t1_lib.c:895:	if (s->tlsext_status_expected)
t1_lib.c:903:	if (s->s3->server_opaque_prf_input != NULL &&
t1_lib.c:904:	    s->version != DTLS1_VERSION)
t1_lib.c:906:		size_t sol = s->s3->server_opaque_prf_input_len;
t1_lib.c:916:		memcpy(ret, s->s3->server_opaque_prf_input, sol);
t1_lib.c:922:	if(SSL_IS_DTLS(s) && s->srtp_profile)
t1_lib.c:942:	if (((s->s3->tmp.new_cipher->id & 0xFFFF)==0x80 || (s->s3->tmp.new_cipher->id & 0xFFFF)==0x81) 
t1_lib.c:959:	if (s->tlsext_heartbeat & SSL_TLSEXT_HB_ENABLED)
t1_lib.c:969:		if (s->tlsext_heartbeat & SSL_TLSEXT_HB_DONT_RECV_REQUESTS)
t1_lib.c:978:	next_proto_neg_seen = s->s3->next_proto_neg_seen;
t1_lib.c:979:	s->s3->next_proto_neg_seen = 0;
t1_lib.c:980:	if (next_proto_neg_seen && s->ctx->next_protos_advertised_cb)
t1_lib.c:986:		r = s->ctx->next_protos_advertised_cb(s, &npa, &npalen, s->ctx->next_protos_advertised_cb_arg);
t1_lib.c:994:			s->s3->next_proto_neg_seen = 1;
t1_lib.c:1085:	s->s3->is_probably_safari = 1;
t1_lib.c:1098:	s->servername_done = 0;
t1_lib.c:1099:	s->tlsext_status_type = -1;
t1_lib.c:1101:	s->s3->next_proto_neg_seen = 0;
t1_lib.c:1105:	s->tlsext_heartbeat &= ~(SSL_TLSEXT_HB_ENABLED |
t1_lib.c:1110:	if (s->options & SSL_OP_SAFARI_ECDHE_ECDSA_BUG)
t1_lib.c:1131:		if (s->tlsext_debug_cb)
t1_lib.c:1132:			s->tlsext_debug_cb(s, 0, type, data, size,
t1_lib.c:1133:						s->tlsext_debug_arg);
t1_lib.c:1188:				if (s->servername_done == 0)
t1_lib.c:1192:					if (!s->hit)
t1_lib.c:1194:						if(s->session->tlsext_hostname)
t1_lib.c:1204:						if ((s->session->tlsext_hostname = OPENSSL_malloc(len+1)) == NULL)
t1_lib.c:1209:						memcpy(s->session->tlsext_hostname, sdata, len);
t1_lib.c:1210:						s->session->tlsext_hostname[len]='\0';
t1_lib.c:1211:						if (strlen(s->session->tlsext_hostname) != len) {
t1_lib.c:1212:							OPENSSL_free(s->session->tlsext_hostname);
t1_lib.c:1213:							s->session->tlsext_hostname = NULL;
t1_lib.c:1217:						s->servername_done = 1; 
t1_lib.c:1221:						s->servername_done = s->session->tlsext_hostname
t1_lib.c:1222:							&& strlen(s->session->tlsext_hostname) == len 
t1_lib.c:1223:							&& strncmp(s->session->tlsext_hostname, (char *)sdata, len) == 0;
t1_lib.c:1248:			if (s->srp_ctx.login != NULL)
t1_lib.c:1253:			if ((s->srp_ctx.login = OPENSSL_malloc(len+1)) == NULL)
t1_lib.c:1255:			memcpy(s->srp_ctx.login, &data[1], len);
t1_lib.c:1256:			s->srp_ctx.login[len]='\0';
t1_lib.c:1258:			if (strlen(s->srp_ctx.login) != len) 
t1_lib.c:1277:			if (!s->hit)
t1_lib.c:1279:				if(s->session->tlsext_ecpointformatlist)
t1_lib.c:1281:					OPENSSL_free(s->session->tlsext_ecpointformatlist);
t1_lib.c:1282:					s->session->tlsext_ecpointformatlist = NULL;
t1_lib.c:1284:				s->session->tlsext_ecpointformatlist_length = 0;
t1_lib.c:1285:				if ((s->session->tlsext_ecpointformatlist = OPENSSL_malloc(ecpointformatlist_length)) == NULL)
t1_lib.c:1290:				s->session->tlsext_ecpointformatlist_length = ecpointformatlist_length;
t1_lib.c:1291:				memcpy(s->session->tlsext_ecpointformatlist, sdata, ecpointformatlist_length);
t1_lib.c:1294:			fprintf(stderr,"ssl_parse_clienthello_tlsext s->session->tlsext_ecpointformatlist (length=%i) ", s->session->tlsext_ecpointformatlist_length);
t1_lib.c:1295:			sdata = s->session->tlsext_ecpointformatlist;
t1_lib.c:1296:			for (i = 0; i < s->session->tlsext_ecpointformatlist_length; i++)
t1_lib.c:1313:			if (!s->hit)
t1_lib.c:1315:				if(s->session->tlsext_ellipticcurvelist)
t1_lib.c:1320:				s->session->tlsext_ellipticcurvelist_length = 0;
t1_lib.c:1321:				if ((s->session->tlsext_ellipticcurvelist = OPENSSL_malloc(ellipticcurvelist_length)) == NULL)
t1_lib.c:1326:				s->session->tlsext_ellipticcurvelist_length = ellipticcurvelist_length;
t1_lib.c:1327:				memcpy(s->session->tlsext_ellipticcurvelist, sdata, ellipticcurvelist_length);
t1_lib.c:1330:			fprintf(stderr,"ssl_parse_clienthello_tlsext s->session->tlsext_ellipticcurvelist (length=%i) ", s->session->tlsext_ellipticcurvelist_length);
t1_lib.c:1331:			sdata = s->session->tlsext_ellipticcurvelist;
t1_lib.c:1332:			for (i = 0; i < s->session->tlsext_ellipticcurvelist_length; i++)
t1_lib.c:1340:	             s->version != DTLS1_VERSION)
t1_lib.c:1349:			n2s(sdata, s->s3->client_opaque_prf_input_len);
t1_lib.c:1350:			if (s->s3->client_opaque_prf_input_len != size - 2)
t1_lib.c:1356:			if (s->s3->client_opaque_prf_input != NULL) /* shouldn't really happen */
t1_lib.c:1357:				OPENSSL_free(s->s3->client_opaque_prf_input);
t1_lib.c:1358:			if (s->s3->client_opaque_prf_input_len == 0)
t1_lib.c:1359:				s->s3->client_opaque_prf_input = OPENSSL_malloc(1); /* dummy byte just to get non-NULL */
t1_lib.c:1361:				s->s3->client_opaque_prf_input = BUF_memdup(sdata, s->s3->client_opaque_prf_input_len);
t1_lib.c:1362:			if (s->s3->client_opaque_prf_input == NULL)
t1_lib.c:1371:			if (s->tls_session_ticket_ext_cb &&
t1_lib.c:1372:			    !s->tls_session_ticket_ext_cb(s, data, size, s->tls_session_ticket_ext_cb_arg))
t1_lib.c:1421:		         s->version != DTLS1_VERSION)
t1_lib.c:1430:			s->tlsext_status_type = *data++;
t1_lib.c:1432:			if (s->tlsext_status_type == TLSEXT_STATUSTYPE_ocsp)
t1_lib.c:1476:					if (!s->tlsext_ocsp_ids
t1_lib.c:1477:						&& !(s->tlsext_ocsp_ids =
t1_lib.c:1485:							s->tlsext_ocsp_ids, id))
t1_lib.c:1509:					if (s->tlsext_ocsp_exts)
t1_lib.c:1511:						sk_X509_EXTENSION_pop_free(s->tlsext_ocsp_exts,
t1_lib.c:1515:					s->tlsext_ocsp_exts =
t1_lib.c:1518:					if (!s->tlsext_ocsp_exts
t1_lib.c:1530:					s->tlsext_status_type = -1;
t1_lib.c:1538:							s->tlsext_heartbeat |= SSL_TLSEXT_HB_ENABLED;
t1_lib.c:1541:							s->tlsext_heartbeat |= SSL_TLSEXT_HB_ENABLED;
t1_lib.c:1542:							s->tlsext_heartbeat |= SSL_TLSEXT_HB_DONT_SEND_REQUESTS;
t1_lib.c:1551:			 s->s3->tmp.finish_md_len == 0)
t1_lib.c:1556:			 * s->new_session will be set on renegotiation, but we
t1_lib.c:1564:			 * in this connection is if s->s3->tmp.finish_md_len >
t1_lib.c:1568:			s->s3->next_proto_neg_seen = 1;
t1_lib.c:1592:	if (!renegotiate_seen && s->renegotiate &&
t1_lib.c:1593:		!(s->options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION))
t1_lib.c:1634:	s->s3->next_proto_neg_seen = 0;
t1_lib.c:1638:	s->tlsext_heartbeat &= ~(SSL_TLSEXT_HB_ENABLED |
t1_lib.c:1660:		if (s->tlsext_debug_cb)
t1_lib.c:1661:			s->tlsext_debug_cb(s, 1, type, data, size,
t1_lib.c:1662:						s->tlsext_debug_arg);
t1_lib.c:1666:			if (s->tlsext_hostname == NULL || size > 0)
t1_lib.c:1686:			if (!s->hit)
t1_lib.c:1688:				s->session->tlsext_ecpointformatlist_length = 0;
t1_lib.c:1689:				if (s->session->tlsext_ecpointformatlist != NULL) OPENSSL_free(s->session->tlsext_ecpointformatlist);
t1_lib.c:1690:				if ((s->session->tlsext_ecpointformatlist = OPENSSL_malloc(ecpointformatlist_length)) == NULL)
t1_lib.c:1695:				s->session->tlsext_ecpointformatlist_length = ecpointformatlist_length;
t1_lib.c:1696:				memcpy(s->session->tlsext_ecpointformatlist, sdata, ecpointformatlist_length);
t1_lib.c:1699:			fprintf(stderr,"ssl_parse_serverhello_tlsext s->session->tlsext_ecpointformatlist ");
t1_lib.c:1700:			sdata = s->session->tlsext_ecpointformatlist;
t1_lib.c:1701:			for (i = 0; i < s->session->tlsext_ecpointformatlist_length; i++)
t1_lib.c:1710:			if (s->tls_session_ticket_ext_cb &&
t1_lib.c:1711:			    !s->tls_session_ticket_ext_cb(s, data, size, s->tls_session_ticket_ext_cb_arg))
t1_lib.c:1722:			s->tlsext_ticket_expected = 1;
t1_lib.c:1726:	             s->version != DTLS1_VERSION)
t1_lib.c:1735:			n2s(sdata, s->s3->server_opaque_prf_input_len);
t1_lib.c:1736:			if (s->s3->server_opaque_prf_input_len != size - 2)
t1_lib.c:1742:			if (s->s3->server_opaque_prf_input != NULL) /* shouldn't really happen */
t1_lib.c:1743:				OPENSSL_free(s->s3->server_opaque_prf_input);
t1_lib.c:1744:			if (s->s3->server_opaque_prf_input_len == 0)
t1_lib.c:1745:				s->s3->server_opaque_prf_input = OPENSSL_malloc(1); /* dummy byte just to get non-NULL */
t1_lib.c:1747:				s->s3->server_opaque_prf_input = BUF_memdup(sdata, s->s3->server_opaque_prf_input_len);
t1_lib.c:1749:			if (s->s3->server_opaque_prf_input == NULL)
t1_lib.c:1757:		         s->version != DTLS1_VERSION)
t1_lib.c:1762:			if ((s->tlsext_status_type == -1) || (size > 0))
t1_lib.c:1768:			s->tlsext_status_expected = 1;
t1_lib.c:1772:			 s->s3->tmp.finish_md_len == 0)
t1_lib.c:1778:			if (s->ctx->next_proto_select_cb == NULL)
t1_lib.c:1789:			if (s->ctx->next_proto_select_cb(s, &selected, &selected_len, data, size, s->ctx->next_proto_select_cb_arg) != SSL_TLSEXT_ERR_OK)
t1_lib.c:1794:			s->next_proto_negotiated = OPENSSL_malloc(selected_len);
t1_lib.c:1795:			if (!s->next_proto_negotiated)
t1_lib.c:1800:			memcpy(s->next_proto_negotiated, selected, selected_len);
t1_lib.c:1801:			s->next_proto_negotiated_len = selected_len;
t1_lib.c:1802:			s->s3->next_proto_neg_seen = 1;
t1_lib.c:1831:							s->tlsext_heartbeat |= SSL_TLSEXT_HB_ENABLED;
t1_lib.c:1834:							s->tlsext_heartbeat |= SSL_TLSEXT_HB_ENABLED;
t1_lib.c:1835:							s->tlsext_heartbeat |= SSL_TLSEXT_HB_DONT_SEND_REQUESTS;
t1_lib.c:1860:	if (!s->hit && tlsext_servername == 1)
t1_lib.c:1862: 		if (s->tlsext_hostname)
t1_lib.c:1864:			if (s->session->tlsext_hostname == NULL)
t1_lib.c:1866:				s->session->tlsext_hostname = BUF_strdup(s->tlsext_hostname);	
t1_lib.c:1867:				if (!s->session->tlsext_hostname)
t1_lib.c:1893:		&& !(s->options & SSL_OP_LEGACY_SERVER_CONNECT)
t1_lib.c:1894:		&& !(s->options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION))
t1_lib.c:1930:	using_ecc = using_ecc && (s->version >= TLS1_VERSION);
t1_lib.c:1933:		if (s->tlsext_ecpointformatlist != NULL) OPENSSL_free(s->tlsext_ecpointformatlist);
t1_lib.c:1934:		if ((s->tlsext_ecpointformatlist = OPENSSL_malloc(3)) == NULL)
t1_lib.c:1939:		s->tlsext_ecpointformatlist_length = 3;
t1_lib.c:1940:		s->tlsext_ecpointformatlist[0] = TLSEXT_ECPOINTFORMAT_uncompressed;
t1_lib.c:1941:		s->tlsext_ecpointformatlist[1] = TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime;
t1_lib.c:1942:		s->tlsext_ecpointformatlist[2] = TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2;
t1_lib.c:1944:		/* we support all named elliptic curves in draft-ietf-tls-ecc-12 */
t1_lib.c:1945:		if (s->tlsext_ellipticcurvelist != NULL) OPENSSL_free(s->tlsext_ellipticcurvelist);
t1_lib.c:1946:		s->tlsext_ellipticcurvelist_length = sizeof(pref_list)/sizeof(pref_list[0]) * 2;
t1_lib.c:1947:		if ((s->tlsext_ellipticcurvelist = OPENSSL_malloc(s->tlsext_ellipticcurvelist_length)) == NULL)
t1_lib.c:1949:			s->tlsext_ellipticcurvelist_length = 0;
t1_lib.c:1953:		for (i = 0, j = s->tlsext_ellipticcurvelist; (unsigned int)i <
t1_lib.c:1966:		if (s->ctx->tlsext_opaque_prf_input_callback != 0)
t1_lib.c:1968:			r = s->ctx->tlsext_opaque_prf_input_callback(s, NULL, 0, s->ctx->tlsext_opaque_prf_input_callback_arg);
t1_lib.c:1973:		if (s->tlsext_opaque_prf_input != NULL)
t1_lib.c:1975:			if (s->s3->client_opaque_prf_input != NULL) /* shouldn't really happen */
t1_lib.c:1976:				OPENSSL_free(s->s3->client_opaque_prf_input);
t1_lib.c:1978:			if (s->tlsext_opaque_prf_input_len == 0)
t1_lib.c:1979:				s->s3->client_opaque_prf_input = OPENSSL_malloc(1); /* dummy byte just to get non-NULL */
t1_lib.c:1981:				s->s3->client_opaque_prf_input = BUF_memdup(s->tlsext_opaque_prf_input, s->tlsext_opaque_prf_input_len);
t1_lib.c:1982:			if (s->s3->client_opaque_prf_input == NULL)
t1_lib.c:1987:			s->s3->client_opaque_prf_input_len = s->tlsext_opaque_prf_input_len;
t1_lib.c:1992:			s->s3->server_opaque_prf_input_len = s->tlsext_opaque_prf_input_len;
t1_lib.c:2007:	unsigned long alg_k = s->s3->tmp.new_cipher->algorithm_mkey;
t1_lib.c:2008:	unsigned long alg_a = s->s3->tmp.new_cipher->algorithm_auth;
t1_lib.c:2010:	using_ecc = using_ecc && (s->session->tlsext_ecpointformatlist != NULL);
t1_lib.c:2014:		if (s->tlsext_ecpointformatlist != NULL) OPENSSL_free(s->tlsext_ecpointformatlist);
t1_lib.c:2015:		if ((s->tlsext_ecpointformatlist = OPENSSL_malloc(3)) == NULL)
t1_lib.c:2020:		s->tlsext_ecpointformatlist_length = 3;
t1_lib.c:2021:		s->tlsext_ecpointformatlist[0] = TLSEXT_ECPOINTFORMAT_uncompressed;
t1_lib.c:2022:		s->tlsext_ecpointformatlist[1] = TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime;
t1_lib.c:2023:		s->tlsext_ecpointformatlist[2] = TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2;
t1_lib.c:2044:	if (s->ctx != NULL && s->ctx->tlsext_servername_callback != 0) 
t1_lib.c:2045:		ret = s->ctx->tlsext_servername_callback(s, &al, s->ctx->tlsext_servername_arg);
t1_lib.c:2046:	else if (s->initial_ctx != NULL && s->initial_ctx->tlsext_servername_callback != 0) 		
t1_lib.c:2047:		ret = s->initial_ctx->tlsext_servername_callback(s, &al, s->initial_ctx->tlsext_servername_arg);
t1_lib.c:2058:		if (s->ctx->tlsext_opaque_prf_input_callback != 0)
t1_lib.c:2060:			r = s->ctx->tlsext_opaque_prf_input_callback(s, NULL, 0, s->ctx->tlsext_opaque_prf_input_callback_arg);
t1_lib.c:2069:		if (s->s3->server_opaque_prf_input != NULL) /* shouldn't really happen */
t1_lib.c:2070:			OPENSSL_free(s->s3->server_opaque_prf_input);
t1_lib.c:2071:		s->s3->server_opaque_prf_input = NULL;
t1_lib.c:2073:		if (s->tlsext_opaque_prf_input != NULL)
t1_lib.c:2075:			if (s->s3->client_opaque_prf_input != NULL &&
t1_lib.c:2076:				s->s3->client_opaque_prf_input_len == s->tlsext_opaque_prf_input_len)
t1_lib.c:2081:				if (s->tlsext_opaque_prf_input_len == 0)
t1_lib.c:2082:					s->s3->server_opaque_prf_input = OPENSSL_malloc(1); /* dummy byte just to get non-NULL */
t1_lib.c:2084:					s->s3->server_opaque_prf_input = BUF_memdup(s->tlsext_opaque_prf_input, s->tlsext_opaque_prf_input_len);
t1_lib.c:2085:				if (s->s3->server_opaque_prf_input == NULL)
t1_lib.c:2091:				s->s3->server_opaque_prf_input_len = s->tlsext_opaque_prf_input_len;
t1_lib.c:2095:		if (r == 2 && s->s3->server_opaque_prf_input == NULL)
t1_lib.c:2119:			s->servername_done=0;
t1_lib.c:2135:	if ((s->tlsext_status_type != -1) && s->ctx && s->ctx->tlsext_status_cb)
t1_lib.c:2143:			s->tlsext_status_expected = 0;
t1_lib.c:2149:		s->cert->key = certpkey;
t1_lib.c:2150:		r = s->ctx->tlsext_status_cb(s, s->ctx->tlsext_status_arg);
t1_lib.c:2155:				s->tlsext_status_expected = 0;
t1_lib.c:2159:				if (s->tlsext_ocsp_resp)
t1_lib.c:2160:					s->tlsext_status_expected = 1;
t1_lib.c:2162:					s->tlsext_status_expected = 0;
t1_lib.c:2172:		s->tlsext_status_expected = 0;
t1_lib.c:2200:	unsigned long alg_k = s->s3->tmp.new_cipher->algorithm_mkey;
t1_lib.c:2201:	unsigned long alg_a = s->s3->tmp.new_cipher->algorithm_auth;
t1_lib.c:2202:	if ((s->tlsext_ecpointformatlist != NULL) && (s->tlsext_ecpointformatlist_length > 0) && 
t1_lib.c:2203:	    (s->session->tlsext_ecpointformatlist != NULL) && (s->session->tlsext_ecpointformatlist_length > 0) && 
t1_lib.c:2210:		list = s->session->tlsext_ecpointformatlist;
t1_lib.c:2211:		for (i = 0; i < s->session->tlsext_ecpointformatlist_length; i++)
t1_lib.c:2228:	if (s->ctx != NULL && s->ctx->tlsext_servername_callback != 0) 
t1_lib.c:2229:		ret = s->ctx->tlsext_servername_callback(s, &al, s->ctx->tlsext_servername_arg);
t1_lib.c:2230:	else if (s->initial_ctx != NULL && s->initial_ctx->tlsext_servername_callback != 0) 		
t1_lib.c:2231:		ret = s->initial_ctx->tlsext_servername_callback(s, &al, s->initial_ctx->tlsext_servername_arg);
t1_lib.c:2234:	if (s->s3->server_opaque_prf_input_len > 0)
t1_lib.c:2239:		if (s->s3->server_opaque_prf_input == NULL)
t1_lib.c:2247:		if (s->s3->client_opaque_prf_input == NULL ||
t1_lib.c:2248:		    s->s3->client_opaque_prf_input_len != s->s3->server_opaque_prf_input_len)
t1_lib.c:2259:	if ((s->tlsext_status_type != -1) && !(s->tlsext_status_expected)
t1_lib.c:2260:			&& s->ctx && s->ctx->tlsext_status_cb)
t1_lib.c:2266:		if (s->tlsext_ocsp_resp)
t1_lib.c:2268:			OPENSSL_free(s->tlsext_ocsp_resp);
t1_lib.c:2269:			s->tlsext_ocsp_resp = NULL;
t1_lib.c:2271:		s->tlsext_ocsp_resplen = -1;
t1_lib.c:2272:		r = s->ctx->tlsext_status_cb(s, s->ctx->tlsext_status_arg);
t1_lib.c:2296:			s->servername_done=0;
t1_lib.c:2314: * If s->tls_session_secret_cb is set then we are expecting a pre-shared key
t1_lib.c:2316: * never be decrypted, nor will s->tlsext_ticket_expected be set to 1.
t1_lib.c:2323: *    2: either s->tls_session_secret_cb was set, or a ticket was offered but
t1_lib.c:2328: *   Sets s->tlsext_ticket_expected to 1 if the server will have to issue
t1_lib.c:2330: *   (and s->tls_session_secret_cb is NULL) but the client either doesn't have
t1_lib.c:2332: *   s->ctx->tlsext_ticket_key_cb asked to renew the client's ticket.
t1_lib.c:2333: *   Otherwise, s->tlsext_ticket_expected is set to 0.
t1_lib.c:2343:	s->tlsext_ticket_expected = 0;
t1_lib.c:2350:	if ((s->version <= SSL3_VERSION) || !limit)
t1_lib.c:2355:	if (s->version == DTLS1_VERSION || s->version == DTLS1_BAD_VER)
t1_lib.c:2390:				s->tlsext_ticket_expected = 1;
t1_lib.c:2393:			if (s->tls_session_secret_cb)
t1_lib.c:2406:					s->tlsext_ticket_expected = 1;
t1_lib.c:2411:					s->tlsext_ticket_expected = 1;
t1_lib.c:2448:	SSL_CTX *tctx = s->initial_ctx;
t1_lib.c:2527:			memcpy(sess->session_id, sess_id, sesslen);
t1_lib.c:2528:		sess->session_id_length = sesslen;
t1_lib.c:2658:	CERT *c = s->cert;
t1_lib.c:2737:	unsigned char *p = &s->s3->rrec.data[0], *pl;
t1_lib.c:2742:	if (s->msg_callback)
t1_lib.c:2743:		s->msg_callback(0, s->version, TLS1_RT_HEARTBEAT,
t1_lib.c:2744:			&s->s3->rrec.data[0], s->s3->rrec.length,
t1_lib.c:2745:			s, s->msg_callback_arg);
t1_lib.c:2748:	if (1 + 2 + 16 > s->s3->rrec.length)
t1_lib.c:2752:	if (1 + 2 + payload + 16 > s->s3->rrec.length)
t1_lib.c:2778:		if (r >= 0 && s->msg_callback)
t1_lib.c:2779:			s->msg_callback(1, s->version, TLS1_RT_HEARTBEAT,
t1_lib.c:2781:				s, s->msg_callback_arg);
t1_lib.c:2797:		if (payload == 18 && seq == s->tlsext_hb_seq)
t1_lib.c:2799:			s->tlsext_hb_seq++;
t1_lib.c:2800:			s->tlsext_hb_pending = 0;
t1_lib.c:2816:	if (!(s->tlsext_heartbeat & SSL_TLSEXT_HB_ENABLED) ||
t1_lib.c:2817:	    s->tlsext_heartbeat & SSL_TLSEXT_HB_DONT_SEND_REQUESTS)
t1_lib.c:2824:	if (s->tlsext_hb_pending)
t1_lib.c:2831:	if (SSL_in_init(s) || s->in_handshake)
t1_lib.c:2858:	s2n(s->tlsext_hb_seq, p);
t1_lib.c:2868:		if (s->msg_callback)
t1_lib.c:2869:			s->msg_callback(1, s->version, TLS1_RT_HEARTBEAT,
t1_lib.c:2871:				s, s->msg_callback_arg);
t1_lib.c:2873:		s->tlsext_hb_pending = 1;
t1_mb.c:173:    n2s(p,s->mb_info.group_id);
t1_mb.c:175:    printf("PROGRESS: Group ID: %d\n", s->mb_info.group_id);
t1_mb.c:177:    switch(s->mb_info.group_id)
t1_mb.c:188:    nk = s->mb_info.num_keys = *(p++);
t1_mb.c:189:    s->mb_info.key_length = (int *)calloc(nk, sizeof(int));
t1_mb.c:190:    s->mb_info.secret = (unsigned char **)calloc(nk, sizeof(unsigned char *));
t1_mb.c:191:    s->mb_info.mac_array = (unsigned char **)calloc(nk, sizeof(unsigned char *));
t1_mb.c:195:      s->mb_info.mac_array[i] = (unsigned char *)malloc(SSL_MAX_GLOBAL_MAC_KEY_LENGTH);
t1_mb.c:208:    s->mb_info.serv_keypair = serv_keypair;
t1_mb.c:214:        s->mb_info.key_length[i] = klen;
t1_mb.c:226:        s->mb_info.secret[i] = secret_str;
t1_mb.c:235:    s->mb_enabled = 1; // Enable the mb mode
t1_mb.c:252:	int group_id = s->mb_info.group_id;
t1_mb.c:274:		pub_to_char(s->mb_info.serv_keypair->pub, &serv_str, &serv_length, group, ctx);
t1_mb.c:282:        for (i=0; i<s->mb_info.num_keys; i++)
t1_mb.c:285:          memcpy(tmp, s->mb_info.secret[i] + 1, 32);
t1_mb.c:288:                s->s3->server_random, SSL3_RANDOM_SIZE,
t1_mb.c:289:                s->s3->client_random, SSL3_RANDOM_SIZE,
t1_mb.c:291:                s->mb_info.secret[i], SECRET_LENGTH,
t1_mb.c:292:                s->mb_info.mac_array[i], SSL_MAX_GLOBAL_MAC_KEY_LENGTH); //LENGTH: 32
t1_mb.c:295:          PRINTK("Server Random", s->s3->server_random, SSL3_RANDOM_SIZE);
t1_mb.c:296:          PRINTK("Client Random", s->s3->client_random, SSL3_RANDOM_SIZE);
t1_mb.c:298:          PRINTK("Global MAC", s->mb_info.mac_array[i], SSL_MAX_GLOBAL_MAC_KEY_LENGTH);
test.c:126:    n2s(p,s->mb_info.group_id);
test.c:128:    if(s->mb_info.group_id != NID_X9_62_prime256v1) //SSL_CURVE_SECP256R1
test.c:134:    s->mb_info.num_keys = *(p++);
test.c:136:    if(s->mb_info.num_keys < 1)
test.c:147:    s->mb_info->serv_keypair = serv_keypair;
test.c:156:    for(i=0; i<s->mb_info.num_keys; i++)
test.c:158:        s->mb_info.key_length[i] = *(p++);
test.c:159:        peer_str = (unsigned char *)malloc(s->mb_info.key_length[i]);
test.c:160:        memcpy(peer_str, p, s->mb_info.key_length[i]);
test.c:161:        p += s->mb_info.key_length[i];
test.c:164:        char_to_pub(peer_str, s->mb_info.key_length[i], peer_pub, group, ctx);
test.c:170:                s->s3->server_random, SSL3_RANDOM_SIZE,
test.c:171:                s->s3->client_random, SSL3_RANDOM_SIZE,
test.c:174:                s->mb_info.mac_array[i], NULL, SSL_MAX_GLOBAL_MAC_KEY_LENGTH); //LENGTH: 48
test.c:180:    s->mb_enabled = 1; // Enable the mb mode
test.c:197:	uint16_t group_id = s->mb_info.group_id;
test.c:207:		pub_to_char(s->mb_info.serv_keypair.pub, serv_str, &serv_length, group, ctx);
s3_both.c:127:/* send s->init_buf in records of type 'type' (SSL3_RT_HANDSHAKE or SSL3_RT_CHANGE_CIPHER_SPEC) */
s3_both.c:132:	ret=ssl3_write_bytes(s,type,&s->init_buf->data[s->init_off],
s3_both.c:133:	                     s->init_num);
s3_both.c:138:		ssl3_finish_mac(s,(unsigned char *)&s->init_buf->data[s->init_off],ret);
s3_both.c:140:	if (ret == s->init_num)
s3_both.c:142:		if (s->msg_callback)
s3_both.c:143:			s->msg_callback(1, s->version, type, s->init_buf->data, (size_t)(s->init_off + s->init_num), s, s->msg_callback_arg);
s3_both.c:146:	s->init_off+=ret;
s3_both.c:147:	s->init_num-=ret;
s3_both.c:157:	if (s->state == a)
s3_both.c:159:		d=(unsigned char *)s->init_buf->data;
s3_both.c:162:		i=s->method->ssl3_enc->final_finish_mac(s,
s3_both.c:163:			sender,slen,s->s3->tmp.finish_md);
s3_both.c:166:		s->s3->tmp.finish_md_len = i;
s3_both.c:167:		memcpy(p, s->s3->tmp.finish_md, i);
s3_both.c:173:                if(s->type == SSL_ST_CONNECT)
s3_both.c:176:                         memcpy(s->s3->previous_client_finished, 
s3_both.c:177:                             s->s3->tmp.finish_md, i);
s3_both.c:178:                         s->s3->previous_client_finished_len=i;
s3_both.c:183:                        memcpy(s->s3->previous_server_finished, 
s3_both.c:184:                            s->s3->tmp.finish_md, i);
s3_both.c:185:                        s->s3->previous_server_finished_len=i;
s3_both.c:197:		s->init_num=(int)l+4;
s3_both.c:198:		s->init_off=0;
s3_both.c:200:		s->state=b;
s3_both.c:216:	if (s->s3->tmp.new_cipher == NULL)
s3_both.c:218:	if (s->state & SSL_ST_CONNECT)
s3_both.c:220:		sender=s->method->ssl3_enc->server_finished_label;
s3_both.c:221:		slen=s->method->ssl3_enc->server_finished_label_len;
s3_both.c:225:		sender=s->method->ssl3_enc->client_finished_label;
s3_both.c:226:		slen=s->method->ssl3_enc->client_finished_label_len;
s3_both.c:229:	s->s3->tmp.peer_finish_md_len = s->method->ssl3_enc->final_finish_mac(s,
s3_both.c:230:		sender,slen,s->s3->tmp.peer_finish_md);
s3_both.c:242:	 * change cipher spec message and is in s->s3->tmp.peer_finish_md.
s3_both.c:246:	n=s->method->ssl_get_message(s,
s3_both.c:256:	if (!s->s3->change_cipher_spec)
s3_both.c:262:	s->s3->change_cipher_spec=0;
s3_both.c:264:	p = (unsigned char *)s->init_msg;
s3_both.c:265:	i = s->s3->tmp.peer_finish_md_len;
s3_both.c:274:	if (CRYPTO_memcmp(p, s->s3->tmp.peer_finish_md, i) != 0)
s3_both.c:283:        if(s->type == SSL_ST_ACCEPT)
s3_both.c:286:                memcpy(s->s3->previous_client_finished, 
s3_both.c:287:                    s->s3->tmp.peer_finish_md, i);
s3_both.c:288:                s->s3->previous_client_finished_len=i;
s3_both.c:293:                memcpy(s->s3->previous_server_finished, 
s3_both.c:294:                    s->s3->tmp.peer_finish_md, i);
s3_both.c:295:                s->s3->previous_server_finished_len=i;
s3_both.c:316:	if (s->state == a)
s3_both.c:318:		p=(unsigned char *)s->init_buf->data;
s3_both.c:320:		s->init_num=1;
s3_both.c:321:		s->init_off=0;
s3_both.c:323:		s->state=b;
s3_both.c:357:	if ((s->mode & SSL_MODE_NO_AUTO_CHAIN) || s->ctx->extra_certs)
s3_both.c:363:	buf=s->init_buf;
s3_both.c:380:			if (!X509_STORE_CTX_init(&xs_ctx,s->ctx->cert_store,x,NULL))
s3_both.c:402:	for (i=0; i<sk_X509_num(s->ctx->extra_certs); i++)
s3_both.c:404:		x=sk_X509_value(s->ctx->extra_certs,i);
s3_both.c:423:	s->orig_cert_buf = BUF_MEM_new();
s3_both.c:431:	chain_store = s->ctx->cert_store;
s3_both.c:433:	if ((s->mode & SSL_MODE_NO_AUTO_CHAIN) || s->ctx->extra_certs)
s3_both.c:439:	buf=s->orig_cert_buf;
s3_both.c:478:	for (i=0; i<sk_X509_num(s->ctx->extra_certs); i++)
s3_both.c:480:		x=sk_X509_value(s->ctx->extra_certs,i);
s3_both.c:501:	if (s->s3->tmp.reuse_message)
s3_both.c:503:		s->s3->tmp.reuse_message=0;
s3_both.c:504:		if ((mt >= 0) && (s->s3->tmp.message_type != mt))
s3_both.c:511:		s->init_msg = s->init_buf->data + 4;
s3_both.c:512:		s->init_num = (int)s->s3->tmp.message_size;
s3_both.c:513:		return s->init_num;
s3_both.c:516:	p=(unsigned char *)s->init_buf->data;
s3_both.c:518:	if (s->state == st1) /* s->init_num < 4 */
s3_both.c:524:			while (s->init_num < 4)
s3_both.c:526:				i=s->method->ssl_read_bytes(s,SSL3_RT_HANDSHAKE,
s3_both.c:527:					&p[s->init_num],4 - s->init_num, 0);
s3_both.c:530:					s->rwstate=SSL_READING;
s3_both.c:534:				s->init_num+=i;
s3_both.c:538:			if (!s->server)
s3_both.c:546:						s->init_num = 0;
s3_both.c:549:						if (s->msg_callback)
s3_both.c:550:							s->msg_callback(0, s->version, SSL3_RT_HANDSHAKE, p, 4, s, s->msg_callback_arg);
s3_both.c:555:		/* s->init_num == 4 */
s3_both.c:575:		s->s3->tmp.message_type= *(p++);
s3_both.c:590:		if (l && !BUF_MEM_grow_clean(s->init_buf,(int)l+4))
s3_both.c:595:		s->s3->tmp.message_size=l;
s3_both.c:596:		s->state=stn;
s3_both.c:598:		s->init_msg = s->init_buf->data + 4;
s3_both.c:599:		s->init_num = 0;
s3_both.c:603:	p = s->init_msg;
s3_both.c:604:	n = s->s3->tmp.message_size - s->init_num;
s3_both.c:607:		i=s->method->ssl_read_bytes(s,SSL3_RT_HANDSHAKE,&p[s->init_num],n,0);
s3_both.c:610:			s->rwstate=SSL_READING;
s3_both.c:614:		s->init_num += i;
s3_both.c:621:	if (*s->init_buf->data == SSL3_MT_FINISHED)
s3_both.c:626:	ssl3_finish_mac(s, (unsigned char *)s->init_buf->data, s->init_num + 4);
s3_both.c:627:	if (s->msg_callback)
s3_both.c:628:		s->msg_callback(0, s->version, SSL3_RT_HANDSHAKE, s->init_buf->data, (size_t)s->init_num + 4, s, s->msg_callback_arg);
s3_both.c:630:	return s->init_num;
s3_both.c:825:	if (s->s3->rbuf.buf == NULL)
s3_both.c:830:		if (s->options & SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER)
s3_both.c:832:			s->s3->init_extra = 1;
s3_both.c:836:		if (!(s->options & SSL_OP_NO_COMPRESSION))
s3_both.c:839:		if ((p=freelist_extract(s->ctx, 1, len)) == NULL)
s3_both.c:841:		s->s3->rbuf.buf = p;
s3_both.c:842:		s->s3->rbuf.len = len;
s3_both.c:845:	s->packet= &(s->s3->rbuf.buf[0]);
s3_both.c:867:	if (s->s3->wbuf.buf == NULL)
s3_both.c:869:		len = s->max_send_fragment
s3_both.c:873:		if (!(s->options & SSL_OP_NO_COMPRESSION))
s3_both.c:876:		if (!(s->options & SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS))
s3_both.c:880:		if ((p=freelist_extract(s->ctx, 0, len)) == NULL)
s3_both.c:882:		s->s3->wbuf.buf = p;
s3_both.c:883:		s->s3->wbuf.len = len;
s3_both.c:905:	if (s->s3->wbuf.buf != NULL)
s3_both.c:907:		freelist_insert(s->ctx, 0, s->s3->wbuf.len, s->s3->wbuf.buf);
s3_both.c:908:		s->s3->wbuf.buf = NULL;
s3_both.c:915:	if (s->s3->rbuf.buf != NULL)
s3_both.c:917:		freelist_insert(s->ctx, 1, s->s3->rbuf.len, s->s3->rbuf.buf);
s3_both.c:918:		s->s3->rbuf.buf = NULL;
Binary file .s3_srvr.c.swp matches
s3_srvr.c:190:	if ((s->s3->tmp.new_cipher->algorithm_mkey & SSL_kSRP) &&
s3_srvr.c:191:	    (s->srp_ctx.TLS_ext_srp_username_callback != NULL))
s3_srvr.c:193:		if(s->srp_ctx.login == NULL)
s3_srvr.c:226:	if (s->info_callback != NULL)
s3_srvr.c:227:		cb=s->info_callback;
s3_srvr.c:228:	else if (s->ctx->info_callback != NULL)
s3_srvr.c:229:		cb=s->ctx->info_callback;
s3_srvr.c:232:	s->in_handshake++;
s3_srvr.c:235:	if (s->cert == NULL)
s3_srvr.c:246:	if (s->tlsext_hb_pending)
s3_srvr.c:248:		s->tlsext_hb_pending = 0;
s3_srvr.c:249:		s->tlsext_hb_seq++;
s3_srvr.c:255:		state=s->state;
s3_srvr.c:257:		switch (s->state)
s3_srvr.c:260:			s->renegotiate=1;
s3_srvr.c:261:			/* s->state=SSL_ST_ACCEPT; */
s3_srvr.c:268:			s->server=1;
s3_srvr.c:271:			if ((s->version>>8) != 3)
s3_srvr.c:276:			s->type=SSL_ST_ACCEPT;
s3_srvr.c:278:			if (s->init_buf == NULL)
s3_srvr.c:290:				s->init_buf=buf;
s3_srvr.c:299:			s->init_num=0;
s3_srvr.c:300:			s->s3->flags &= ~SSL3_FLAGS_SGC_RESTART_DONE;
s3_srvr.c:302:			if (s->state != SSL_ST_RENEGOTIATE)
s3_srvr.c:310:				s->state=SSL3_ST_SR_CLNT_HELLO_A;
s3_srvr.c:311:				s->ctx->stats.sess_accept++;
s3_srvr.c:313:			else if (!s->s3->send_connection_binding &&
s3_srvr.c:314:				!(s->options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION))
s3_srvr.c:327:				/* s->state == SSL_ST_RENEGOTIATE,
s3_srvr.c:329:				s->ctx->stats.sess_accept_renegotiate++;
s3_srvr.c:330:				s->state=SSL3_ST_SW_HELLO_REQ_A;
s3_srvr.c:337:			s->shutdown=0;
s3_srvr.c:340:			s->s3->tmp.next_state=SSL3_ST_SW_HELLO_REQ_C;
s3_srvr.c:341:			s->state=SSL3_ST_SW_FLUSH;
s3_srvr.c:342:			s->init_num=0;
s3_srvr.c:348:			s->state=SSL_ST_OK;
s3_srvr.c:355:			s->shutdown=0;
s3_srvr.c:356:			if (s->rwstate != SSL_X509_LOOKUP)
s3_srvr.c:367:					s->rwstate=SSL_X509_LOOKUP;
s3_srvr.c:384:			s->renegotiate = 2;
s3_srvr.c:385:			s->state=SSL3_ST_SW_SRVR_HELLO_A;
s3_srvr.c:386:			s->init_num=0;
s3_srvr.c:394:			if (s->hit)
s3_srvr.c:396:				if (s->tlsext_ticket_expected)
s3_srvr.c:397:					s->state=SSL3_ST_SW_SESSION_TICKET_A;
s3_srvr.c:399:					s->state=SSL3_ST_SW_CHANGE_A;
s3_srvr.c:402:			if (s->hit)
s3_srvr.c:403:					s->state=SSL3_ST_SW_CHANGE_A;
s3_srvr.c:406:				s->state=SSL3_ST_SW_CERT_A;
s3_srvr.c:407:			s->init_num=0;
s3_srvr.c:414:			if (!(s->s3->tmp.new_cipher->algorithm_auth & (SSL_aNULL|SSL_aKRB5|SSL_aSRP))
s3_srvr.c:415:				&& !(s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK))
s3_srvr.c:420:				if (s->tlsext_status_expected)
s3_srvr.c:421:					s->state=SSL3_ST_SW_CERT_STATUS_A;
s3_srvr.c:423:					s->state=SSL3_ST_SW_KEY_EXCH_A;
s3_srvr.c:428:				s->state=SSL3_ST_SW_KEY_EXCH_A;
s3_srvr.c:435:			s->state=SSL3_ST_SW_KEY_EXCH_A;
s3_srvr.c:437:			s->init_num=0;
s3_srvr.c:442:			alg_k = s->s3->tmp.new_cipher->algorithm_mkey;
s3_srvr.c:446:			if ((s->options & SSL_OP_EPHEMERAL_RSA)
s3_srvr.c:455:				s->s3->tmp.use_rsa_tmp=1;
s3_srvr.c:457:				s->s3->tmp.use_rsa_tmp=0;
s3_srvr.c:471:			if (s->s3->tmp.use_rsa_tmp
s3_srvr.c:475:			    || ((alg_k & SSL_kPSK) && s->ctx->psk_identity_hint)
s3_srvr.c:484:				&& (s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey == NULL
s3_srvr.c:485:				    || (SSL_C_IS_EXPORT(s->s3->tmp.new_cipher)
s3_srvr.c:486:					&& EVP_PKEY_size(s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey)*8 > SSL_C_EXPORT_PKEYLENGTH(s->s3->tmp.new_cipher)
s3_srvr.c:498:			s->state=SSL3_ST_SW_CERT_REQ_A;
s3_srvr.c:499:			s->init_num=0;
s3_srvr.c:505:				!(s->verify_mode & SSL_VERIFY_PEER) ||
s3_srvr.c:508:				((s->session->peer != NULL) &&
s3_srvr.c:509:				 (s->verify_mode & SSL_VERIFY_CLIENT_ONCE)) ||
s3_srvr.c:513:				((s->s3->tmp.new_cipher->algorithm_auth & SSL_aNULL) &&
s3_srvr.c:516:				 !(s->verify_mode & SSL_VERIFY_FAIL_IF_NO_PEER_CERT)) ||
s3_srvr.c:518:				(s->s3->tmp.new_cipher->algorithm_auth & SSL_aKRB5) ||
s3_srvr.c:520:				(s->s3->tmp.new_cipher->algorithm_auth & SSL_aSRP)
s3_srvr.c:523:				|| (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK))
s3_srvr.c:527:				s->s3->tmp.cert_request=0;
s3_srvr.c:528:				s->state=SSL3_ST_SW_SRVR_DONE_A;
s3_srvr.c:529:				if (s->s3->handshake_buffer)
s3_srvr.c:535:				s->s3->tmp.cert_request=1;
s3_srvr.c:539:				s->state=SSL3_ST_SW_SRVR_DONE_A;
s3_srvr.c:541:				s->state=SSL3_ST_SW_FLUSH;
s3_srvr.c:542:				s->s3->tmp.next_state=SSL3_ST_SR_CERT_A;
s3_srvr.c:544:				s->init_num=0;
s3_srvr.c:552:			s->s3->tmp.next_state=SSL3_ST_SR_CERT_A;
s3_srvr.c:553:			s->state=SSL3_ST_SW_FLUSH;
s3_srvr.c:554:			s->init_num=0;
s3_srvr.c:569:			s->rwstate=SSL_WRITING;
s3_srvr.c:570:			if (BIO_flush(s->wbio) <= 0)
s3_srvr.c:575:			s->rwstate=SSL_NOTHING;
s3_srvr.c:577:			s->state=s->s3->tmp.next_state;
s3_srvr.c:587:				s->state = SSL3_ST_SR_CLNT_HELLO_C;
s3_srvr.c:589:				if (s->s3->tmp.cert_request)
s3_srvr.c:594:				s->init_num=0;
s3_srvr.c:595:				s->state=SSL3_ST_SR_KEY_EXCH_A;
s3_srvr.c:615:				s->state=SSL3_ST_SR_FINISHED_A;
s3_srvr.c:617:				if (s->s3->next_proto_neg_seen)
s3_srvr.c:618:					s->state=SSL3_ST_SR_NEXT_PROTO_A;
s3_srvr.c:620:					s->state=SSL3_ST_SR_FINISHED_A;
s3_srvr.c:622:				s->init_num = 0;
s3_srvr.c:626:				s->state=SSL3_ST_SR_CERT_VRFY_A;
s3_srvr.c:627:				s->init_num=0;
s3_srvr.c:628:				if (!s->session->peer)
s3_srvr.c:633:				if (!s->s3->handshake_buffer)
s3_srvr.c:638:				s->s3->flags |= TLS1_FLAGS_KEEP_HANDSHAKE;
s3_srvr.c:647:				s->state=SSL3_ST_SR_CERT_VRFY_A;
s3_srvr.c:648:				s->init_num=0;
s3_srvr.c:655:				if (s->s3->handshake_buffer)
s3_srvr.c:659:					if (s->s3->handshake_dgst[dgst_num]) 
s3_srvr.c:663:						s->method->ssl3_enc->cert_verify_mac(s,EVP_MD_CTX_type(s->s3->handshake_dgst[dgst_num]),&(s->s3->tmp.cert_verify_md[offset]));
s3_srvr.c:664:						dgst_size=EVP_MD_CTX_size(s->s3->handshake_dgst[dgst_num]);
s3_srvr.c:678:			s->s3->flags |= SSL3_FLAGS_CCS_OK;
s3_srvr.c:684:			s->state=SSL3_ST_SR_FINISHED_A;
s3_srvr.c:686:			if (s->s3->next_proto_neg_seen)
s3_srvr.c:687:				s->state=SSL3_ST_SR_NEXT_PROTO_A;
s3_srvr.c:689:				s->state=SSL3_ST_SR_FINISHED_A;
s3_srvr.c:691:			s->init_num=0;
s3_srvr.c:699:			s->init_num = 0;
s3_srvr.c:700:			s->state=SSL3_ST_SR_FINISHED_A;
s3_srvr.c:706:			s->s3->flags |= SSL3_FLAGS_CCS_OK;
s3_srvr.c:710:			if (s->hit)
s3_srvr.c:711:				s->state=SSL_ST_OK;
s3_srvr.c:713:			else if (s->tlsext_ticket_expected)
s3_srvr.c:714:				s->state=SSL3_ST_SW_SESSION_TICKET_A;
s3_srvr.c:717:				s->state=SSL3_ST_SW_CHANGE_A;
s3_srvr.c:718:			s->init_num=0;
s3_srvr.c:726:			s->state=SSL3_ST_SW_CHANGE_A;
s3_srvr.c:727:			s->init_num=0;
s3_srvr.c:734:			s->state=SSL3_ST_SW_KEY_EXCH_A;
s3_srvr.c:735:			s->init_num=0;
s3_srvr.c:743:			s->session->cipher=s->s3->tmp.new_cipher;
s3_srvr.c:744:			if (!s->method->ssl3_enc->setup_key_block(s))
s3_srvr.c:751:			s->state=SSL3_ST_SW_FINISHED_A;
s3_srvr.c:752:			s->init_num=0;
s3_srvr.c:754:			if (!s->method->ssl3_enc->change_cipher_state(s,
s3_srvr.c:767:				s->method->ssl3_enc->server_finished_label,
s3_srvr.c:768:				s->method->ssl3_enc->server_finished_label_len);
s3_srvr.c:770:			s->state=SSL3_ST_SW_FLUSH;
s3_srvr.c:771:			if (s->hit)
s3_srvr.c:774:				s->s3->tmp.next_state=SSL3_ST_SR_FINISHED_A;
s3_srvr.c:776:				if (s->s3->next_proto_neg_seen)
s3_srvr.c:778:					s->s3->flags |= SSL3_FLAGS_CCS_OK;
s3_srvr.c:779:					s->s3->tmp.next_state=SSL3_ST_SR_NEXT_PROTO_A;
s3_srvr.c:782:					s->s3->tmp.next_state=SSL3_ST_SR_FINISHED_A;
s3_srvr.c:786:				s->s3->tmp.next_state=SSL_ST_OK;
s3_srvr.c:787:			s->init_num=0;
s3_srvr.c:794:			BUF_MEM_free(s->init_buf);
s3_srvr.c:795:			s->init_buf=NULL;
s3_srvr.c:800:			s->init_num=0;
s3_srvr.c:802:			if (s->renegotiate == 2) /* skipped if we just sent a HelloRequest */
s3_srvr.c:804:				s->renegotiate=0;
s3_srvr.c:805:				s->new_session=0;
s3_srvr.c:809:				s->ctx->stats.sess_accept_good++;
s3_srvr.c:810:				/* s->server=1; */
s3_srvr.c:811:				s->handshake_func=ssl3_accept;
s3_srvr.c:827:		if (!s->s3->tmp.reuse_message && !skip)
s3_srvr.c:829:			if (s->debug)
s3_srvr.c:831:				if ((ret=BIO_flush(s->wbio)) <= 0)
s3_srvr.c:836:			if ((cb != NULL) && (s->state != state))
s3_srvr.c:838:				new_state=s->state;
s3_srvr.c:839:				s->state=state;
s3_srvr.c:841:				s->state=new_state;
s3_srvr.c:847:	/* BIO_flush(s->wbio); */
s3_srvr.c:849:	s->in_handshake--;
s3_srvr.c:859:	if (s->state == SSL3_ST_SW_HELLO_REQ_A)
s3_srvr.c:861:		p=(unsigned char *)s->init_buf->data;
s3_srvr.c:867:		s->state=SSL3_ST_SW_HELLO_REQ_B;
s3_srvr.c:869:		s->init_num=4;
s3_srvr.c:870:		s->init_off=0;
s3_srvr.c:884:	n=s->method->ssl_get_message(s,
s3_srvr.c:888:		s->max_cert_list,
s3_srvr.c:891:	s->s3->tmp.reuse_message = 1;
s3_srvr.c:892:	if (s->s3->tmp.message_type == SSL3_MT_CLIENT_HELLO)
s3_srvr.c:896:		if (s->s3->flags & SSL3_FLAGS_SGC_RESTART_DONE)
s3_srvr.c:904:		if (s->s3->tmp.dh != NULL)
s3_srvr.c:906:			DH_free(s->s3->tmp.dh);
s3_srvr.c:907:			s->s3->tmp.dh = NULL;
s3_srvr.c:911:		if (s->s3->tmp.ecdh != NULL)
s3_srvr.c:913:			EC_KEY_free(s->s3->tmp.ecdh);
s3_srvr.c:914:			s->s3->tmp.ecdh = NULL;
s3_srvr.c:917:		s->s3->flags |= SSL3_FLAGS_SGC_RESTART_DONE;
s3_srvr.c:942:	if (s->state == SSL3_ST_SR_CLNT_HELLO_A
s3_srvr.c:945:		s->state=SSL3_ST_SR_CLNT_HELLO_B;
s3_srvr.c:947:	s->first_packet=1;
s3_srvr.c:948:	n=s->method->ssl_get_message(s,
s3_srvr.c:956:	s->first_packet=0;
s3_srvr.c:957:	d=p=(unsigned char *)s->init_msg;
s3_srvr.c:961:	s->client_version=(((int)p[0])<<8)|(int)p[1];
s3_srvr.c:964:	if ((s->version == DTLS1_VERSION && s->client_version > s->version) ||
s3_srvr.c:965:	    (s->version != DTLS1_VERSION && s->client_version < s->version))
s3_srvr.c:968:		if ((s->client_version>>8) == SSL3_VERSION_MAJOR && 
s3_srvr.c:969:			!s->enc_write_ctx && !s->write_hash)
s3_srvr.c:972:			s->version = s->client_version;
s3_srvr.c:994:	memcpy(s->s3->client_random,p,SSL3_RANDOM_SIZE);
s3_srvr.c:1000:	s->hit=0;
s3_srvr.c:1008:	 * renegotiation but not a new session (s->new_session remains unset): for servers,
s3_srvr.c:1012:	if ((s->new_session && (s->options & SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION)))
s3_srvr.c:1022:			s->hit=1;
s3_srvr.c:1035:	if (s->version == DTLS1_VERSION || s->version == DTLS1_BAD_VER)
s3_srvr.c:1045:		if ( cookie_len > sizeof(s->d1->rcvd_cookie))
s3_srvr.c:1057:			memcpy(s->d1->rcvd_cookie, p, cookie_len);
s3_srvr.c:1059:			if ( s->ctx->app_verify_cookie_cb != NULL)
s3_srvr.c:1061:				if ( s->ctx->app_verify_cookie_cb(s, s->d1->rcvd_cookie,
s3_srvr.c:1071:			else if ( memcmp(s->d1->rcvd_cookie, s->d1->cookie, 
s3_srvr.c:1072:						  s->d1->cookie_len) != 0) /* default verification */
s3_srvr.c:1109:	if ((s->hit) && (i > 0))
s3_srvr.c:1112:		id=s->session->cipher->id;
s3_srvr.c:1134:		if (j == 0 && (s->options & SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG) && (sk_SSL_CIPHER_num(ciphers) == 1))
s3_srvr.c:1144:				s->session->cipher = c;
s3_srvr.c:1185:	if (s->version >= SSL3_VERSION)
s3_srvr.c:1205:		pos=s->s3->server_random;
s3_srvr.c:1213:	if (!s->hit && s->version >= TLS1_VERSION && s->tls_session_secret_cb)
s3_srvr.c:1217:		s->session->master_key_length=sizeof(s->session->master_key);
s3_srvr.c:1218:		if(s->tls_session_secret_cb(s, s->session->master_key, &s->session->master_key_length,
s3_srvr.c:1219:			ciphers, &pref_cipher, s->tls_session_secret_cb_arg))
s3_srvr.c:1221:			s->hit=1;
s3_srvr.c:1222:			s->session->ciphers=ciphers;
s3_srvr.c:1223:			s->session->verify_result=X509_V_OK;
s3_srvr.c:1228:			pref_cipher=pref_cipher ? pref_cipher : ssl3_choose_cipher(s, s->session->ciphers, SSL_get_ciphers(s));
s3_srvr.c:1236:			s->session->cipher=pref_cipher;
s3_srvr.c:1238:			if (s->cipher_list)
s3_srvr.c:1239:				sk_SSL_CIPHER_free(s->cipher_list);
s3_srvr.c:1241:			if (s->cipher_list_by_id)
s3_srvr.c:1242:				sk_SSL_CIPHER_free(s->cipher_list_by_id);
s3_srvr.c:1244:			s->cipher_list = sk_SSL_CIPHER_dup(s->session->ciphers);
s3_srvr.c:1245:			s->cipher_list_by_id = sk_SSL_CIPHER_dup(s->session->ciphers);
s3_srvr.c:1253:	s->s3->tmp.new_compression=NULL;
s3_srvr.c:1256:	if (s->session->compress_meth != 0)
s3_srvr.c:1258:		int m, comp_id = s->session->compress_meth;
s3_srvr.c:1261:		if (s->options & SSL_OP_NO_COMPRESSION)
s3_srvr.c:1268:		for (m = 0; m < sk_SSL_COMP_num(s->ctx->comp_methods); m++)
s3_srvr.c:1270:			comp=sk_SSL_COMP_value(s->ctx->comp_methods,m);
s3_srvr.c:1273:				s->s3->tmp.new_compression=comp;
s3_srvr.c:1277:		if (s->s3->tmp.new_compression == NULL)
s3_srvr.c:1296:	else if (s->hit)
s3_srvr.c:1298:	else if (!(s->options & SSL_OP_NO_COMPRESSION) && s->ctx->comp_methods)
s3_srvr.c:1302:		nn=sk_SSL_COMP_num(s->ctx->comp_methods);
s3_srvr.c:1305:			comp=sk_SSL_COMP_value(s->ctx->comp_methods,m);
s3_srvr.c:1318:			s->s3->tmp.new_compression=comp;
s3_srvr.c:1326:	if (s->session->compress_meth != 0)
s3_srvr.c:1334:	/* Given s->session->ciphers and SSL_get_ciphers, we must
s3_srvr.c:1337:	if (!s->hit)
s3_srvr.c:1340:		s->session->compress_meth=0;
s3_srvr.c:1342:		s->session->compress_meth=(comp == NULL)?0:comp->id;
s3_srvr.c:1344:		if (s->session->ciphers != NULL)
s3_srvr.c:1345:			sk_SSL_CIPHER_free(s->session->ciphers);
s3_srvr.c:1346:		s->session->ciphers=ciphers;
s3_srvr.c:1354:		c=ssl3_choose_cipher(s,s->session->ciphers,
s3_srvr.c:1363:		s->s3->tmp.new_cipher=c;
s3_srvr.c:1373:		if (s->options & SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG)
s3_srvr.c:1375:			sk=s->session->ciphers;
s3_srvr.c:1385:				s->s3->tmp.new_cipher=nc;
s3_srvr.c:1387:				s->s3->tmp.new_cipher=ec;
s3_srvr.c:1389:				s->s3->tmp.new_cipher=s->session->cipher;
s3_srvr.c:1393:		s->s3->tmp.new_cipher=s->session->cipher;
s3_srvr.c:1396:	if (TLS1_get_version(s) < TLS1_2_VERSION || !(s->verify_mode & SSL_VERIFY_PEER))
s3_srvr.c:1411:	 * s->session		- The ssl session has been setup.
s3_srvr.c:1412:	 * s->hit		- session reuse flag
s3_srvr.c:1413:	 * s->tmp.new_cipher	- the new cipher to use.
s3_srvr.c:1417:	if (s->version >= SSL3_VERSION)
s3_srvr.c:1444:	if (s->state == SSL3_ST_SW_SRVR_HELLO_A)
s3_srvr.c:1446:		buf=(unsigned char *)s->init_buf->data;
s3_srvr.c:1448:		p=s->s3->server_random;
s3_srvr.c:1455:		*(p++)=s->version>>8;
s3_srvr.c:1456:		*(p++)=s->version&0xff;
s3_srvr.c:1459:		memcpy(p,s->s3->server_random,SSL3_RANDOM_SIZE);
s3_srvr.c:1473:		 * s->hit is non-zero in either case of session reuse,
s3_srvr.c:1477:		if (!(s->ctx->session_cache_mode & SSL_SESS_CACHE_SERVER)
s3_srvr.c:1478:			&& !s->hit)
s3_srvr.c:1479:			s->session->session_id_length=0;
s3_srvr.c:1481:		sl=s->session->session_id_length;
s3_srvr.c:1482:		if (sl > (int)sizeof(s->session->session_id))
s3_srvr.c:1488:		memcpy(p,s->session->session_id,sl);
s3_srvr.c:1492:		i=ssl3_put_cipher_by_char(s->s3->tmp.new_cipher,p);
s3_srvr.c:1499:		if (s->s3->tmp.new_compression == NULL)
s3_srvr.c:1502:			*(p++)=s->s3->tmp.new_compression->id;
s3_srvr.c:1522:		s->state=SSL3_ST_SW_SRVR_HELLO_B;
s3_srvr.c:1524:		s->init_num=p-buf;
s3_srvr.c:1525:		s->init_off=0;
s3_srvr.c:1536:	if (s->state == SSL3_ST_SW_SRVR_DONE_A)
s3_srvr.c:1538:		p=(unsigned char *)s->init_buf->data;
s3_srvr.c:1546:		s->state=SSL3_ST_SW_SRVR_DONE_B;
s3_srvr.c:1548:		s->init_num=4;
s3_srvr.c:1549:		s->init_off=0;
s3_srvr.c:1588:	if (s->state == SSL3_ST_SW_KEY_EXCH_A)
s3_srvr.c:1590:		type=s->s3->tmp.new_cipher->algorithm_mkey;
s3_srvr.c:1591:		cert=s->cert;
s3_srvr.c:1593:		buf=s->init_buf;
s3_srvr.c:1601:			if ((rsa == NULL) && (s->cert->rsa_tmp_cb != NULL))
s3_srvr.c:1603:				rsa=s->cert->rsa_tmp_cb(s,
s3_srvr.c:1604:				      SSL_C_IS_EXPORT(s->s3->tmp.new_cipher),
s3_srvr.c:1605:				      SSL_C_EXPORT_PKEYLENGTH(s->s3->tmp.new_cipher));
s3_srvr.c:1623:			s->s3->tmp.use_rsa_tmp=1;
s3_srvr.c:1631:			if ((dhp == NULL) && (s->cert->dh_tmp_cb != NULL))
s3_srvr.c:1632:				dhp=s->cert->dh_tmp_cb(s,
s3_srvr.c:1633:				      SSL_C_IS_EXPORT(s->s3->tmp.new_cipher),
s3_srvr.c:1634:				      SSL_C_EXPORT_PKEYLENGTH(s->s3->tmp.new_cipher));
s3_srvr.c:1642:			if (s->s3->tmp.dh != NULL)
s3_srvr.c:1654:			s->s3->tmp.dh=dh;
s3_srvr.c:1657:			     (s->options & SSL_OP_SINGLE_DH_USE)))
s3_srvr.c:1689:			if ((ecdhp == NULL) && (s->cert->ecdh_tmp_cb != NULL))
s3_srvr.c:1691:				ecdhp=s->cert->ecdh_tmp_cb(s,
s3_srvr.c:1692:				      SSL_C_IS_EXPORT(s->s3->tmp.new_cipher),
s3_srvr.c:1693:				      SSL_C_EXPORT_PKEYLENGTH(s->s3->tmp.new_cipher));
s3_srvr.c:1702:			if (s->s3->tmp.ecdh != NULL)
s3_srvr.c:1720:			s->s3->tmp.ecdh=ecdh;
s3_srvr.c:1723:			    (s->options & SSL_OP_SINGLE_ECDH_USE))
s3_srvr.c:1740:			if (SSL_C_IS_EXPORT(s->s3->tmp.new_cipher) &&
s3_srvr.c:1813:				n+=2+strlen(s->ctx->psk_identity_hint);
s3_srvr.c:1820:			if ((s->srp_ctx.N == NULL) ||
s3_srvr.c:1821:				(s->srp_ctx.g == NULL) ||
s3_srvr.c:1822:				(s->srp_ctx.s == NULL) ||
s3_srvr.c:1823:				(s->srp_ctx.B == NULL))
s3_srvr.c:1828:			r[0]=s->srp_ctx.N;
s3_srvr.c:1829:			r[1]=s->srp_ctx.g;
s3_srvr.c:1830:			r[2]=s->srp_ctx.s;
s3_srvr.c:1831:			r[3]=s->srp_ctx.B;
s3_srvr.c:1851:		if (!(s->s3->tmp.new_cipher->algorithm_auth & (SSL_aNULL|SSL_aSRP))
s3_srvr.c:1852:			&& !(s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK))
s3_srvr.c:1854:			if ((pkey=ssl_get_sign_pkey(s,s->s3->tmp.new_cipher,&md))
s3_srvr.c:1873:		d=(unsigned char *)s->init_buf->data;
s3_srvr.c:1921:			s2n(strlen(s->ctx->psk_identity_hint), p); 
s3_srvr.c:1922:			strncpy((char *)p, s->ctx->psk_identity_hint, strlen(s->ctx->psk_identity_hint));
s3_srvr.c:1923:			p+=strlen(s->ctx->psk_identity_hint);
s3_srvr.c:1943:						?s->ctx->md5:s->ctx->sha1, NULL);
s3_srvr.c:1944:					EVP_DigestUpdate(&md_ctx,&(s->s3->client_random[0]),SSL3_RANDOM_SIZE);
s3_srvr.c:1945:					EVP_DigestUpdate(&md_ctx,&(s->s3->server_random[0]),SSL3_RANDOM_SIZE);
s3_srvr.c:1983:				EVP_SignUpdate(&md_ctx,&(s->s3->client_random[0]),SSL3_RANDOM_SIZE);
s3_srvr.c:1984:				EVP_SignUpdate(&md_ctx,&(s->s3->server_random[0]),SSL3_RANDOM_SIZE);
s3_srvr.c:2011:		s->init_num=n+4;
s3_srvr.c:2012:		s->init_off=0;
s3_srvr.c:2015:	s->state = SSL3_ST_SW_KEY_EXCH_B;
s3_srvr.c:2037:	if (s->state == SSL3_ST_SW_CERT_REQ_A)
s3_srvr.c:2039:		buf=s->init_buf;
s3_srvr.c:2076:				if (!(s->options & SSL_OP_NETSCAPE_CA_DN_BUG))
s3_srvr.c:2104:		s->init_num=n+4;
s3_srvr.c:2105:		s->init_off=0;
s3_srvr.c:2107:		if (!BUF_MEM_grow_clean(buf, s->init_num + 4))
s3_srvr.c:2112:		p=(unsigned char *)s->init_buf->data + s->init_num;
s3_srvr.c:2119:		s->init_num += 4;
s3_srvr.c:2122:		s->state = SSL3_ST_SW_CERT_REQ_B;
s3_srvr.c:2156:	n=s->method->ssl_get_message(s,
s3_srvr.c:2164:	p=(unsigned char *)s->init_msg;
s3_srvr.c:2166:	alg_k=s->s3->tmp.new_cipher->algorithm_mkey;
s3_srvr.c:2176:		if (s->s3->tmp.use_rsa_tmp)
s3_srvr.c:2178:			if ((s->cert != NULL) && (s->cert->rsa_tmp != NULL))
s3_srvr.c:2179:				rsa=s->cert->rsa_tmp;
s3_srvr.c:2192:			pkey=s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey;
s3_srvr.c:2205:		if (s->version > SSL3_VERSION && s->version != DTLS1_BAD_VER)
s3_srvr.c:2210:				if (!(s->options & SSL_OP_TLS_D5_BUG))
s3_srvr.c:2247:		version_good = constant_time_eq_8(p[0], (unsigned)(s->client_version>>8));
s3_srvr.c:2248:		version_good &= constant_time_eq_8(p[1], (unsigned)(s->client_version&0xff));
s3_srvr.c:2257:		if (s->options & SSL_OP_TLS_ROLLBACK_BUG)
s3_srvr.c:2260:			workaround_good = constant_time_eq_8(p[0], (unsigned)(s->version>>8));
s3_srvr.c:2261:			workaround_good &= constant_time_eq_8(p[1], (unsigned)(s->version&0xff));
s3_srvr.c:2277:		s->session->master_key_length=
s3_srvr.c:2278:			s->method->ssl3_enc->generate_master_secret(s,
s3_srvr.c:2279:				s->session->master_key,
s3_srvr.c:2291:			if (!(s->options & SSL_OP_SSLEAY_080_CLIENT_DH_BUG))
s3_srvr.c:2311:			if (s->s3->tmp.dh == NULL)
s3_srvr.c:2318:				dh_srvr=s->s3->tmp.dh;
s3_srvr.c:2337:		DH_free(s->s3->tmp.dh);
s3_srvr.c:2338:		s->s3->tmp.dh=NULL;
s3_srvr.c:2342:		s->session->master_key_length=
s3_srvr.c:2343:			s->method->ssl3_enc->generate_master_secret(s,
s3_srvr.c:2344:				s->session->master_key,p,i);
s3_srvr.c:2356:		KSSL_CTX		*kssl_ctx = s->kssl_ctx;
s3_srvr.c:2498:		if (!((pms[0] == (s->client_version>>8)) && (pms[1] == (s->client_version & 0xff))))
s3_srvr.c:2508:		    if (!(s->options & SSL_OP_TLS_ROLLBACK_BUG))
s3_srvr.c:2518:		s->session->master_key_length=
s3_srvr.c:2519:			s->method->ssl3_enc->generate_master_secret(s,
s3_srvr.c:2520:				s->session->master_key, pms, outl);
s3_srvr.c:2527:				s->session->krb5_client_princ_len = len;
s3_srvr.c:2528:				memcpy(s->session->krb5_client_princ,kssl_ctx->client_princ,len);
s3_srvr.c:2536:		**  if (s->kssl_ctx)  s->kssl_ctx = NULL;
s3_srvr.c:2563:			tkey = s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec;
s3_srvr.c:2570:			tkey = s->s3->tmp.ecdh;
s3_srvr.c:2602:			if (((clnt_pub_pkey=X509_get_pubkey(s->session->peer))
s3_srvr.c:2663:			p=(unsigned char *)s->init_buf->data;
s3_srvr.c:2686:		EC_KEY_free(s->s3->tmp.ecdh);
s3_srvr.c:2687:		s->s3->tmp.ecdh = NULL; 
s3_srvr.c:2690:		s->session->master_key_length = s->method->ssl3_enc-> \
s3_srvr.c:2691:		    generate_master_secret(s, s->session->master_key, p, i);
s3_srvr.c:2722:			if (s->psk_server_callback == NULL)
s3_srvr.c:2733:			psk_len = s->psk_server_callback(s, tmp_id,
s3_srvr.c:2761:			if (s->session->psk_identity != NULL)
s3_srvr.c:2762:				OPENSSL_free(s->session->psk_identity);
s3_srvr.c:2763:			s->session->psk_identity = BUF_strdup((char *)p);
s3_srvr.c:2764:			if (s->session->psk_identity == NULL)
s3_srvr.c:2771:			if (s->session->psk_identity_hint != NULL)
s3_srvr.c:2772:				OPENSSL_free(s->session->psk_identity_hint);
s3_srvr.c:2773:			s->session->psk_identity_hint = BUF_strdup(s->ctx->psk_identity_hint);
s3_srvr.c:2774:			if (s->ctx->psk_identity_hint != NULL &&
s3_srvr.c:2775:				s->session->psk_identity_hint == NULL)
s3_srvr.c:2782:			s->session->master_key_length=
s3_srvr.c:2783:				s->method->ssl3_enc->generate_master_secret(s,
s3_srvr.c:2784:					s->session->master_key, psk_or_pre_ms, pre_ms_len);
s3_srvr.c:2806:			if (!(s->srp_ctx.A=BN_bin2bn(p,i,NULL)))
s3_srvr.c:2811:			if (BN_ucmp(s->srp_ctx.A, s->srp_ctx.N) >= 0
s3_srvr.c:2812:				|| BN_is_zero(s->srp_ctx.A))
s3_srvr.c:2818:			if (s->session->srp_username != NULL)
s3_srvr.c:2819:				OPENSSL_free(s->session->srp_username);
s3_srvr.c:2820:			s->session->srp_username = BUF_strdup(s->srp_ctx.login);
s3_srvr.c:2821:			if (s->session->srp_username == NULL)
s3_srvr.c:2828:			if ((s->session->master_key_length = SRP_generate_server_master_secret(s,s->session->master_key))<0)
s3_srvr.c:2850:			alg_a = s->s3->tmp.new_cipher->algorithm_auth;
s3_srvr.c:2852:				pk = s->cert->pkeys[SSL_PKEY_GOST94].privatekey;
s3_srvr.c:2854:				pk = s->cert->pkeys[SSL_PKEY_GOST01].privatekey;
s3_srvr.c:2862:			client_pub_pkey = X509_get_pubkey(s->session->peer);
s3_srvr.c:2885:			s->session->master_key_length=
s3_srvr.c:2886:				s->method->ssl3_enc->generate_master_secret(s,
s3_srvr.c:2887:					s->session->master_key,premaster_secret,32);
s3_srvr.c:2937:	n=s->method->ssl_get_message(s,
s3_srvr.c:2946:	if (s->session->peer != NULL)
s3_srvr.c:2948:		peer=s->session->peer;
s3_srvr.c:2958:	if (s->s3->tmp.message_type != SSL3_MT_CERTIFICATE_VERIFY)
s3_srvr.c:2960:		s->s3->tmp.reuse_message=1;
s3_srvr.c:2985:	if (s->s3->change_cipher_spec)
s3_srvr.c:2993:	p=(unsigned char *)s->init_msg;
s3_srvr.c:3055:		hdatalen = BIO_get_mem_data(s->s3->handshake_buffer, &hdata);
s3_srvr.c:3085:		i=RSA_verify(NID_md5_sha1, s->s3->tmp.cert_verify_md,
s3_srvr.c:3107:			&(s->s3->tmp.cert_verify_md[MD5_DIGEST_LENGTH]),
s3_srvr.c:3123:			&(s->s3->tmp.cert_verify_md[MD5_DIGEST_LENGTH]),
s3_srvr.c:3147:			j=EVP_PKEY_verify(pctx,signature,64,s->s3->tmp.cert_verify_md,32);
s3_srvr.c:3172:	if (s->s3->handshake_buffer)
s3_srvr.c:3174:		BIO_free(s->s3->handshake_buffer);
s3_srvr.c:3175:		s->s3->handshake_buffer = NULL;
s3_srvr.c:3176:		s->s3->flags &= ~TLS1_FLAGS_KEEP_HANDSHAKE;
s3_srvr.c:3192:	n=s->method->ssl_get_message(s,
s3_srvr.c:3196:		s->max_cert_list,
s3_srvr.c:3201:	if	(s->s3->tmp.message_type == SSL3_MT_CLIENT_KEY_EXCHANGE)
s3_srvr.c:3203:		if (	(s->verify_mode & SSL_VERIFY_PEER) &&
s3_srvr.c:3204:			(s->verify_mode & SSL_VERIFY_FAIL_IF_NO_PEER_CERT))
s3_srvr.c:3211:		if ((s->version > SSL3_VERSION) && s->s3->tmp.cert_request)
s3_srvr.c:3217:		s->s3->tmp.reuse_message=1;
s3_srvr.c:3221:	if (s->s3->tmp.message_type != SSL3_MT_CERTIFICATE)
s3_srvr.c:3227:	p=d=(unsigned char *)s->init_msg;
s3_srvr.c:3277:		if (s->version == SSL3_VERSION)
s3_srvr.c:3284:		else if ((s->verify_mode & SSL_VERIFY_PEER) &&
s3_srvr.c:3285:			 (s->verify_mode & SSL_VERIFY_FAIL_IF_NO_PEER_CERT))
s3_srvr.c:3292:		if (s->s3->handshake_buffer && !ssl3_digest_cached_records(s))
s3_srvr.c:3303:			al=ssl_verify_alarm_type(s->verify_result);
s3_srvr.c:3309:	if (s->session->peer != NULL) /* This should not be needed */
s3_srvr.c:3310:		X509_free(s->session->peer);
s3_srvr.c:3311:	s->session->peer=sk_X509_shift(sk);
s3_srvr.c:3312:	s->session->verify_result = s->verify_result;
s3_srvr.c:3316:	if (s->session->sess_cert == NULL)
s3_srvr.c:3318:		s->session->sess_cert = ssl_sess_cert_new();
s3_srvr.c:3319:		if (s->session->sess_cert == NULL)
s3_srvr.c:3325:	if (s->session->sess_cert->cert_chain != NULL)
s3_srvr.c:3326:		sk_X509_pop_free(s->session->sess_cert->cert_chain, X509_free);
s3_srvr.c:3327:	s->session->sess_cert->cert_chain=sk;
s3_srvr.c:3350:	if (s->state == SSL3_ST_SW_CERT_A)
s3_srvr.c:3356:			if ((s->s3->tmp.new_cipher->algorithm_auth != SSL_aKRB5) ||
s3_srvr.c:3357:			    (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kKRB5))
s3_srvr.c:3365:		s->state=SSL3_ST_SW_CERT_B;
s3_srvr.c:3366:		s->init_num=(int)l;
s3_srvr.c:3367:		s->init_off=0;
s3_srvr.c:3378:	if (s->state == SSL3_ST_SW_SESSION_TICKET_A)
s3_srvr.c:3387:		SSL_CTX *tctx = s->initial_ctx;
s3_srvr.c:3392:		slen_full = i2d_SSL_SESSION(s->session, NULL);
s3_srvr.c:3402:		i2d_SSL_SESSION(s->session, &p);
s3_srvr.c:3412:		sess->session_id_length = 0; /* ID is irrelevant for the ticket */
s3_srvr.c:3431:		if (!BUF_MEM_grow(s->init_buf,
s3_srvr.c:3436:		p=(unsigned char *)s->init_buf->data;
s3_srvr.c:3470:		l2n(s->hit ? 0 : s->session->timeout, p);
s3_srvr.c:3495:		len = p - (unsigned char *)s->init_buf->data;
s3_srvr.c:3496:		p=(unsigned char *)s->init_buf->data + 1;
s3_srvr.c:3502:		s->init_num= len;
s3_srvr.c:3503:		s->state=SSL3_ST_SW_SESSION_TICKET_B;
s3_srvr.c:3504:		s->init_off=0;
s3_srvr.c:3514:	if (s->state == SSL3_ST_SW_CERT_STATUS_A)
s3_srvr.c:3522:		if (!BUF_MEM_grow(s->init_buf, 8 + s->tlsext_ocsp_resplen))
s3_srvr.c:3525:		p=(unsigned char *)s->init_buf->data;
s3_srvr.c:3530:		l2n3(s->tlsext_ocsp_resplen + 4, p);
s3_srvr.c:3532:		*(p++)= s->tlsext_status_type;
s3_srvr.c:3534:		l2n3(s->tlsext_ocsp_resplen, p);
s3_srvr.c:3536:		memcpy(p, s->tlsext_ocsp_resp, s->tlsext_ocsp_resplen);
s3_srvr.c:3538:		s->init_num = 8 + s->tlsext_ocsp_resplen;
s3_srvr.c:3539:		s->state=SSL3_ST_SW_CERT_STATUS_B;
s3_srvr.c:3540:		s->init_off = 0;
s3_srvr.c:3559:	if (!s->s3->next_proto_neg_seen)
s3_srvr.c:3565:	n=s->method->ssl_get_message(s,
s3_srvr.c:3575:	/* s->state doesn't reflect whether ChangeCipherSpec has been received
s3_srvr.c:3576:	 * in this handshake, but s->s3->change_cipher_spec does (will be reset
s3_srvr.c:3578:	if (!s->s3->change_cipher_spec)
s3_srvr.c:3587:	p=(unsigned char *)s->init_msg;
s3_srvr.c:3596:	if (proto_len + 2 > s->init_num)
s3_srvr.c:3599:	if (proto_len + padding_len + 2 != s->init_num)
s3_srvr.c:3602:	s->next_proto_negotiated = OPENSSL_malloc(proto_len);
s3_srvr.c:3603:	if (!s->next_proto_negotiated)
s3_srvr.c:3608:	memcpy(s->next_proto_negotiated, p + 1, proto_len);
s3_srvr.c:3609:	s->next_proto_negotiated_len = proto_len;
t1_ttpa.c:32:    printf("PROGRESS: CC Length in SSL: %d\n", s->cc_len);
t1_ttpa.c:33:    printf("PROGRESS: CC Length in CTX: %d\n", s->ctx->cc_len);
t1_ttpa.c:46:	if (s->cc_len > 0)
t1_ttpa.c:48:	    s->ttpa_enabled = 1; // Enable the cc mode
t1_ttpa.c:102:        //*p = s->cc_len;
t1_ttpa.c:144:        s->ttpa_enabled = 0;
t1_ttpa.c:151:    n2s(p, s->cc_len);
t1_ttpa.c:152:    s->cc = (unsigned char *)malloc(s->cc_len);
t1_ttpa.c:153:    memcpy(s->cc, p, s->cc_len);
t1_ttpa.c:155:    p += s->cc_len;
t1_ttpa.c:194:    if ((s->verify_mode != SSL_VERIFY_NONE) && (i <= 0)
t1_ttpa.c:196:        && !((s->s3->tmp.new_cipher->algorithm_mkey & SSL_kKRB5) &&
t1_ttpa.c:197:             (s->s3->tmp.new_cipher->algorithm_auth & SSL_aKRB5))
t1_ttpa.c:200:        *al = ssl_verify_alarm_type(s->verify_result);
t1_ttpa.c:205:    ERR_clear_error();          /* but we keep s->verify_result */
t1_ttpa.c:211:    if (s->session->sess_orig_cert)
t1_ttpa.c:212:        ssl_sess_cert_free(s->session->sess_orig_cert);
t1_ttpa.c:213:    s->session->sess_orig_cert = orig;
t1_ttpa.c:229:    s->orig_cert_type = i;
t1_enc.c:301:		 s->s3->server_random,SSL3_RANDOM_SIZE,
t1_enc.c:302:		 s->s3->client_random,SSL3_RANDOM_SIZE,
t1_enc.c:304:		 s->session->master_key,s->session->master_key_length,
t1_enc.c:308:                s->session->master_key_length);
t1_enc.c:311:        for (i=0; i < s->session->master_key_length; i++)
t1_enc.c:313:                printf("%02X", s->session->master_key[i]);
t1_enc.c:344:	is_export=SSL_C_IS_EXPORT(s->s3->tmp.new_cipher);
t1_enc.c:345:	c=s->s3->tmp.new_sym_enc;
t1_enc.c:346:	m=s->s3->tmp.new_hash;
t1_enc.c:347:	mac_type = s->s3->tmp.new_mac_pkey_type;
t1_enc.c:349:	comp=s->s3->tmp.new_compression;
t1_enc.c:355:	       s->s3->tmp.new_cipher->algorithm_mkey,
t1_enc.c:356:	       s->s3->tmp.new_cipher->algorithm_auth,
t1_enc.c:361:	printf("\tkey_block: len= %d, data= ", s->s3->tmp.key_block_length);
t1_enc.c:364:        for (i=0; i<s->s3->tmp.key_block_length; i++)
t1_enc.c:365:		printf("%02x", s->s3->tmp.key_block[i]);  printf("\n");
t1_enc.c:371:		if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)
t1_enc.c:372:			s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;
t1_enc.c:374:			s->mac_flags &= ~SSL_MAC_FLAG_READ_MAC_STREAM;
t1_enc.c:376:		if (s->enc_read_ctx != NULL)
t1_enc.c:378:		else if ((s->enc_read_ctx=OPENSSL_malloc(sizeof(EVP_CIPHER_CTX))) == NULL)
t1_enc.c:382:			EVP_CIPHER_CTX_init(s->enc_read_ctx);
t1_enc.c:383:		dd= s->enc_read_ctx;
t1_enc.c:384:		mac_ctx=ssl_replace_hash(&s->read_hash,NULL);
t1_enc.c:386:		if (s->expand != NULL)
t1_enc.c:388:			COMP_CTX_free(s->expand);
t1_enc.c:389:			s->expand=NULL;
t1_enc.c:393:			s->expand=COMP_CTX_new(comp->method);
t1_enc.c:394:			if (s->expand == NULL)
t1_enc.c:399:			if (s->s3->rrec.comp == NULL)
t1_enc.c:400:				s->s3->rrec.comp=(unsigned char *)
t1_enc.c:402:			if (s->s3->rrec.comp == NULL)
t1_enc.c:407: 		if (s->version != DTLS1_VERSION)
t1_enc.c:408:			memset(&(s->s3->read_sequence[0]),0,8);
t1_enc.c:409:		mac_secret= &(s->s3->read_mac_secret[0]);
t1_enc.c:410:		mac_secret_size=&(s->s3->read_mac_secret_size);
t1_enc.c:414:		if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)
t1_enc.c:415:			s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;
t1_enc.c:417:			s->mac_flags &= ~SSL_MAC_FLAG_WRITE_MAC_STREAM;
t1_enc.c:418:		if (s->enc_write_ctx != NULL && !SSL_IS_DTLS(s))
t1_enc.c:420:		else if ((s->enc_write_ctx=EVP_CIPHER_CTX_new()) == NULL)
t1_enc.c:422:		dd= s->enc_write_ctx;
t1_enc.c:428:			s->write_hash = mac_ctx;
t1_enc.c:431:			mac_ctx = ssl_replace_hash(&s->write_hash,NULL);
t1_enc.c:433:		if (s->compress != NULL)
t1_enc.c:435:			COMP_CTX_free(s->compress);
t1_enc.c:436:			s->compress=NULL;
t1_enc.c:440:			s->compress=COMP_CTX_new(comp->method);
t1_enc.c:441:			if (s->compress == NULL)
t1_enc.c:449: 		if (s->version != DTLS1_VERSION)
t1_enc.c:450:			memset(&(s->s3->write_sequence[0]),0,8);
t1_enc.c:451:		mac_secret= &(s->s3->write_mac_secret[0]);
t1_enc.c:452:		mac_secret_size = &(s->s3->write_mac_secret_size);
t1_enc.c:458:	p=s->s3->tmp.key_block;
t1_enc.c:459:	i=*mac_secret_size=s->s3->tmp.new_mac_secret_size;
t1_enc.c:462:	j=is_export ? (cl < SSL_C_EXPORT_KEYLENGTH(s->s3->tmp.new_cipher) ?
t1_enc.c:463:	               cl : SSL_C_EXPORT_KEYLENGTH(s->s3->tmp.new_cipher)) : cl;
t1_enc.c:491:	if (n > s->s3->tmp.key_block_length)
t1_enc.c:517:				s->s3->client_random,SSL3_RANDOM_SIZE,
t1_enc.c:518:				s->s3->server_random,SSL3_RANDOM_SIZE,
t1_enc.c:528:					s->s3->client_random,SSL3_RANDOM_SIZE,
t1_enc.c:529:					s->s3->server_random,SSL3_RANDOM_SIZE,
t1_enc.c:540:	s->session->key_arg_length=0;
t1_enc.c:598:	if (s->s3->tmp.key_block_length != 0)
t1_enc.c:601:	if (!ssl_cipher_get_evp(s->session,&c,&hash,&mac_type,&mac_secret_size,&comp))
t1_enc.c:607:	s->s3->tmp.new_sym_enc=c;
t1_enc.c:608:	s->s3->tmp.new_hash=hash;
t1_enc.c:609:	s->s3->tmp.new_mac_pkey_type = mac_type;
t1_enc.c:610:	s->s3->tmp.new_mac_secret_size = mac_secret_size;
t1_enc.c:622:	s->s3->tmp.key_block_length=num;
t1_enc.c:623:	s->s3->tmp.key_block=p1;
t1_enc.c:633:{ int z; for (z=0; z<SSL3_RANDOM_SIZE; z++) printf("%02X%c",s->s3->client_random[z],((z+1)%16)?' ':'\n'); }
t1_enc.c:635:{ int z; for (z=0; z<SSL3_RANDOM_SIZE; z++) printf("%02X%c",s->s3->server_random[z],((z+1)%16)?' ':'\n'); }
t1_enc.c:637:{ int z; for (z=0; z<s->session->master_key_length; z++) printf("%02X%c",s->session->master_key[z],((z+1)%16)?' ':'\n'); }
t1_enc.c:646:	if (!(s->options & SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS)
t1_enc.c:647:		&& s->method->version <= TLS1_VERSION)
t1_enc.c:650:		 * known-IV problem (http://www.openssl.org/~bodo/tls-cbc.txt)
t1_enc.c:652:		s->s3->need_empty_fragments = 1;
t1_enc.c:654:		if (s->session->cipher != NULL)
t1_enc.c:656:			if (s->session->cipher->algorithm_enc == SSL_eNULL)
t1_enc.c:657:				s->s3->need_empty_fragments = 0;
t1_enc.c:660:			if (s->session->cipher->algorithm_enc == SSL_RC4)
t1_enc.c:661:				s->s3->need_empty_fragments = 0;
t1_enc.c:676:/* tls1_enc encrypts/decrypts the record in |s->wrec| / |s->rrec|, respectively.
t1_enc.c:695:		if (EVP_MD_CTX_md(s->write_hash))
t1_enc.c:697:			int n=EVP_MD_CTX_size(s->write_hash);
t1_enc.c:700:		ds=s->enc_write_ctx;
t1_enc.c:701:		rec= &(s->s3->wrec);
t1_enc.c:702:		if (s->enc_write_ctx == NULL)
t1_enc.c:707:			enc=EVP_CIPHER_CTX_cipher(s->enc_write_ctx);
t1_enc.c:709:			if (s->version >= TLS1_1_VERSION
t1_enc.c:730:		if (EVP_MD_CTX_md(s->read_hash))
t1_enc.c:732:			int n=EVP_MD_CTX_size(s->read_hash);
t1_enc.c:735:		ds=s->enc_read_ctx;
t1_enc.c:736:		rec= &(s->s3->rrec);
t1_enc.c:737:		if (s->enc_read_ctx == NULL)
t1_enc.c:740:			enc=EVP_CIPHER_CTX_cipher(s->enc_read_ctx);
t1_enc.c:747:	if ((s->session == NULL) || (ds == NULL) || (enc == NULL))
t1_enc.c:756:		bs=EVP_CIPHER_block_size(ds->cipher);
t1_enc.c:758:		if (EVP_CIPHER_flags(ds->cipher)&EVP_CIPH_FLAG_AEAD_CIPHER)
t1_enc.c:762:			seq = send?s->s3->write_sequence:s->s3->read_sequence;
t1_enc.c:764:			if (s->version == DTLS1_VERSION || s->version == DTLS1_BAD_VER)
t1_enc.c:768:				s2n(send?s->d1->w_epoch:s->d1->r_epoch,p);
t1_enc.c:783:			buf[9]=(unsigned char)(s->version>>8);
t1_enc.c:784:			buf[10]=(unsigned char)(s->version);
t1_enc.c:796:			i=bs-((int)l%bs);
t1_enc.c:802:			if (s->options & SSL_OP_TLS_BLOCK_PADDING_BUG)
t1_enc.c:804:				if (s->s3->flags & TLS1_FLAGS_TLS_PADDING_BUG)
t1_enc.c:819:			ds->buf_len, ds->cipher->key_len,
t1_enc.c:821:			ds->cipher->iv_len);
t1_enc.c:823:		for (i=0; i<ds->cipher->iv_len; i++) printf("%02X", ds->iv[i]);
t1_enc.c:838:		if ((EVP_CIPHER_flags(ds->cipher)&EVP_CIPH_FLAG_CUSTOM_CIPHER)
t1_enc.c:859:		if (EVP_MD_CTX_md(s->read_hash) != NULL)
t1_enc.c:860:			mac_size = EVP_MD_CTX_size(s->read_hash);
t1_enc.c:875:	if (s->s3->handshake_buffer) 
t1_enc.c:881:		  if (s->s3->handshake_dgst[i]&&EVP_MD_CTX_type(s->s3->handshake_dgst[i])==md_nid) 
t1_enc.c:883:		  	d=s->s3->handshake_dgst[i];
t1_enc.c:913:	if (s->s3->handshake_buffer) 
t1_enc.c:924:			EVP_MD_CTX *hdgst = s->s3->handshake_dgst[idx];
t1_enc.c:943:			s->session->master_key,s->session->master_key_length,
t1_enc.c:1086:	if (s->s3->client_opaque_prf_input != NULL && s->s3->server_opaque_prf_input != NULL &&
t1_enc.c:1087:	    s->s3->client_opaque_prf_input_len > 0 &&
t1_enc.c:1088:	    s->s3->client_opaque_prf_input_len == s->s3->server_opaque_prf_input_len)
t1_enc.c:1090:		co = s->s3->client_opaque_prf_input;
t1_enc.c:1091:		col = s->s3->server_opaque_prf_input_len;
t1_enc.c:1092:		so = s->s3->server_opaque_prf_input;
t1_enc.c:1093:		sol = s->s3->client_opaque_prf_input_len; /* must be same as col (see draft-rescorla-tls-opaque-prf-input-00.txt, section 3.1) */
t1_enc.c:1099:		s->s3->client_random,SSL3_RANDOM_SIZE,
t1_enc.c:1101:		s->s3->server_random,SSL3_RANDOM_SIZE,
t1_enc.c:1104:		s->session->master_key,buff,sizeof buff);
t1_enc.c:1109:	BIO_dump_fp(stderr, (char *)s->s3->client_random, SSL3_RANDOM_SIZE);
t1_enc.c:1111:	BIO_dump_fp(stderr, (char *)s->s3->server_random, SSL3_RANDOM_SIZE);
t1_enc.c:1113:	BIO_dump_fp(stderr, (char *)s->session->master_key, SSL3_MASTER_SECRET_SIZE);
t1_enc.c:1154:	memcpy(val + currentvalpos, s->s3->client_random, SSL3_RANDOM_SIZE);
t1_enc.c:1156:	memcpy(val + currentvalpos, s->s3->server_random, SSL3_RANDOM_SIZE);
t1_enc.c:1191:		      s->session->master_key,s->session->master_key_length,
